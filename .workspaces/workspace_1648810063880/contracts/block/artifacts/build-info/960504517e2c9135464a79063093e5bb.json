{
	"id": "960504517e2c9135464a79063093e5bb",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.4.24",
	"solcLongVersion": "0.4.24+commit.e67f0147",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/block/block.sol": {
				"content": "/**\n *Submitted for verification at Etherscan.io on 2019-05-15\n*/\n\n// File: contracts/utility/interfaces/IOwned.sol\n\npragma solidity ^0.4.24;\n\n/*\n    Owned contract interface\n*/\ncontract IOwned {\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\n    function owner() public view returns (address) {}\n\n    function transferOwnership(address _newOwner) public;\n    function acceptOwnership() public;\n}\n\n// File: contracts/utility/Owned.sol\n\npragma solidity ^0.4.24;\n\n\n/*\n    Provides support and utilities for contract ownership\n*/\ncontract Owned is IOwned {\n    address public owner;\n    address public newOwner;\n\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n\n    /**\n        @dev constructor\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    // allows execution by the owner only\n    modifier ownerOnly {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n        @dev allows transferring the contract ownership\n        the new owner still needs to accept the transfer\n        can only be called by the contract owner\n\n        @param _newOwner    new contract owner\n    */\n    function transferOwnership(address _newOwner) public ownerOnly {\n        require(_newOwner != owner);\n        newOwner = _newOwner;\n    }\n\n    /**\n        @dev used by a new owner to accept an ownership transfer\n    */\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n// File: contracts/utility/Utils.sol\n\npragma solidity ^0.4.24;\n\n/*\n    Utilities & Common Modifiers\n*/\ncontract Utils {\n    /**\n        constructor\n    */\n    constructor() public {\n    }\n\n    // verifies that an amount is greater than zero\n    modifier greaterThanZero(uint256 _amount) {\n        require(_amount > 0);\n        _;\n    }\n\n    // validates an address - currently only checks that it isn't null\n    modifier validAddress(address _address) {\n        require(_address != address(0));\n        _;\n    }\n\n    // verifies that the address is different than this contract address\n    modifier notThis(address _address) {\n        require(_address != address(this));\n        _;\n    }\n\n}\n\n// File: contracts/BancorConverterRegistry.sol\n\npragma solidity ^0.4.24;\n\n\n\n/**\n    Bancor Converter Registry\n\n    The bancor converter registry keeps converter addresses by token addresses and vice versa.\n    The owner can update converter addresses so that a the token address always points to\n    the updated list of converters for each token.\n\n    The contract also allows to iterate through all the tokens in the network.\n\n    Note that converter addresses for each token are returned in ascending order (from oldest\n    to latest).\n*/\ncontract BancorConverterRegistry is Owned, Utils {\n    mapping (address => bool) private tokensRegistered;         // token address -> registered or not\n    mapping (address => address[]) private tokensToConverters;  // token address -> converter addresses\n    mapping (address => address) private convertersToTokens;    // converter address -> token address\n    address[] public tokens;                                    // list of all token addresses\n\n    // triggered when a converter is added to the registry\n    event ConverterAddition(address indexed _token, address _address);\n\n    // triggered when a converter is removed from the registry\n    event ConverterRemoval(address indexed _token, address _address);\n\n    /**\n        @dev constructor\n    */\n    constructor() public {\n    }\n\n    /**\n        @dev returns the number of tokens in the registry\n\n        @return number of tokens\n    */\n    function tokenCount() public view returns (uint256) {\n        return tokens.length;\n    }\n\n    /**\n        @dev returns the number of converters associated with the given token\n        or 0 if the token isn't registered\n\n        @param _token   token address\n\n        @return number of converters\n    */\n    function converterCount(address _token) public view returns (uint256) {\n        return tokensToConverters[_token].length;\n    }\n\n    /**\n        @dev returns the converter address associated with the given token\n        or zero address if no such converter exists\n\n        @param _token   token address\n        @param _index   converter index\n\n        @return converter address\n    */\n    function converterAddress(address _token, uint32 _index) public view returns (address) {\n        if (_index >= tokensToConverters[_token].length)\n            return address(0);\n\n        return tokensToConverters[_token][_index];\n    }\n\n    /**\n        @dev returns the token address associated with the given converter\n        or zero address if no such converter exists\n\n        @param _converter   converter address\n\n        @return token address\n    */\n    function tokenAddress(address _converter) public view returns (address) {\n        return convertersToTokens[_converter];\n    }\n\n    /**\n        @dev adds a new converter address for a given token to the registry\n        throws if the converter is already registered\n\n        @param _token       token address\n        @param _converter   converter address\n    */\n    function registerConverter(address _token, address _converter)\n        public\n        ownerOnly\n        validAddress(_token)\n        validAddress(_converter)\n    {\n        require(convertersToTokens[_converter] == address(0));\n\n        // add the token to the list of tokens\n        if (!tokensRegistered[_token]) {\n            tokens.push(_token);\n            tokensRegistered[_token] = true;\n        }\n\n        tokensToConverters[_token].push(_converter);\n        convertersToTokens[_converter] = _token;\n\n        // dispatch the converter addition event\n        emit ConverterAddition(_token, _converter);\n    }\n\n    /**\n        @dev removes an existing converter from the registry\n        note that the function doesn't scale and might be needed to be called\n        multiple times when removing an older converter from a large converter list\n\n        @param _token   token address\n        @param _index   converter index\n    */\n    function unregisterConverter(address _token, uint32 _index)\n        public\n        ownerOnly\n        validAddress(_token)\n    {\n        require(_index < tokensToConverters[_token].length);\n\n        address converter = tokensToConverters[_token][_index];\n\n        // move all newer converters 1 position lower\n        for (uint32 i = _index + 1; i < tokensToConverters[_token].length; i++) {\n            tokensToConverters[_token][i - 1] = tokensToConverters[_token][i];\n        }\n\n        // decrease the number of converters defined for the token by 1\n        tokensToConverters[_token].length--;\n        \n        // removes the converter from the converters -> tokens list\n        delete convertersToTokens[converter];\n\n        // dispatch the converter removal event\n        emit ConverterRemoval(_token, converter);\n    }\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/block/block.sol": {
				"BancorConverterRegistry": {
					"abi": [
						{
							"constant": false,
							"inputs": [
								{
									"name": "_token",
									"type": "address"
								},
								{
									"name": "_index",
									"type": "uint32"
								}
							],
							"name": "unregisterConverter",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"name": "",
									"type": "uint256"
								}
							],
							"name": "tokens",
							"outputs": [
								{
									"name": "",
									"type": "address"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [],
							"name": "acceptOwnership",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"name": "",
									"type": "address"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"name": "_token",
									"type": "address"
								},
								{
									"name": "_index",
									"type": "uint32"
								}
							],
							"name": "converterAddress",
							"outputs": [
								{
									"name": "",
									"type": "address"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"name": "_converter",
									"type": "address"
								}
							],
							"name": "tokenAddress",
							"outputs": [
								{
									"name": "",
									"type": "address"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "tokenCount",
							"outputs": [
								{
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"name": "_token",
									"type": "address"
								}
							],
							"name": "converterCount",
							"outputs": [
								{
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"name": "_token",
									"type": "address"
								},
								{
									"name": "_converter",
									"type": "address"
								}
							],
							"name": "registerConverter",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "newOwner",
							"outputs": [
								{
									"name": "",
									"type": "address"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"name": "_newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"name": "_token",
									"type": "address"
								},
								{
									"indexed": false,
									"name": "_address",
									"type": "address"
								}
							],
							"name": "ConverterAddition",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"name": "_token",
									"type": "address"
								},
								{
									"indexed": false,
									"name": "_address",
									"type": "address"
								}
							],
							"name": "ConverterRemoval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"name": "_prevOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"name": "_newOwner",
									"type": "address"
								}
							],
							"name": "OwnerUpdate",
							"type": "event"
						}
					],
					"devdoc": {
						"methods": {
							"acceptOwnership()": {
								"details": "used by a new owner to accept an ownership transfer"
							},
							"converterAddress(address,uint32)": {
								"details": "returns the converter address associated with the given token or zero address if no such converter exists",
								"params": {
									"_index": "converter index",
									"_token": "token address"
								},
								"return": "converter address"
							},
							"converterCount(address)": {
								"details": "returns the number of converters associated with the given token or 0 if the token isn't registered",
								"params": {
									"_token": "token address"
								},
								"return": "number of converters"
							},
							"registerConverter(address,address)": {
								"details": "adds a new converter address for a given token to the registry throws if the converter is already registered",
								"params": {
									"_converter": "converter address",
									"_token": "token address"
								}
							},
							"tokenAddress(address)": {
								"details": "returns the token address associated with the given converter or zero address if no such converter exists",
								"params": {
									"_converter": "converter address"
								},
								"return": "token address"
							},
							"tokenCount()": {
								"details": "returns the number of tokens in the registry",
								"return": "number of tokens"
							},
							"transferOwnership(address)": {
								"details": "allows transferring the contract ownership the new owner still needs to accept the transfer can only be called by the contract owner",
								"params": {
									"_newOwner": "new contract owner"
								}
							},
							"unregisterConverter(address,uint32)": {
								"details": "removes an existing converter from the registry note that the function doesn't scale and might be needed to be called multiple times when removing an older converter from a large converter list",
								"params": {
									"_index": "converter index",
									"_token": "token address"
								}
							}
						}
					},
					"evm": {
						"assembly": "    /* \"contracts/block/block.sol\":2852:7044  contract BancorConverterRegistry is Owned, Utils {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/block/block.sol\":3616:3644  constructor() public {... */\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x0\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n  pop\n    /* \"contracts/block/block.sol\":831:836  owner */\n  0x0\n    /* \"contracts/block/block.sol\":831:849  owner = msg.sender */\n  dup1\n  sload\n  not(sub(exp(0x2, 0xa0), 0x1))\n  and\n    /* \"contracts/block/block.sol\":839:849  msg.sender */\n  caller\n    /* \"contracts/block/block.sol\":831:849  owner = msg.sender */\n  or\n  swap1\n  sstore\n    /* \"contracts/block/block.sol\":2852:7044  contract BancorConverterRegistry is Owned, Utils {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x0\n  codecopy\n  0x0\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/block/block.sol\":2852:7044  contract BancorConverterRegistry is Owned, Utils {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x4))\n      and(div(calldataload(0x0), 0x100000000000000000000000000000000000000000000000000000000), 0xffffffff)\n      0x38cb066f\n      dup2\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x4f64b2be\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x79ba5097\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x90ab3106\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x9884e801\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x9f181b5e\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xcd9d4d66\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xd26a8d2e\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xd4ee1d90\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_12\n      jumpi\n    tag_1:\n      0x0\n      dup1\n      revert\n        /* \"contracts/block/block.sol\":6217:7042  function unregisterConverter(address _token, uint32 _index)... */\n    tag_2:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_13\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_13:\n      pop\n        /* \"contracts/block/block.sol\":6217:7042  function unregisterConverter(address _token, uint32 _index)... */\n      tag_14\n      and(calldataload(0x4), sub(exp(0x2, 0xa0), 0x1))\n      and(calldataload(0x24), 0xffffffff)\n      jump(tag_15)\n    tag_14:\n      stop\n        /* \"contracts/block/block.sol\":3215:3238  address[] public tokens */\n    tag_3:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_16\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_16:\n      pop\n        /* \"contracts/block/block.sol\":3215:3238  address[] public tokens */\n      tag_17\n      calldataload(0x4)\n      jump(tag_18)\n    tag_17:\n      0x40\n      dup1\n      mload\n      sub(exp(0x2, 0xa0), 0x1)\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/block/block.sol\":1433:1615  function acceptOwnership() public {... */\n    tag_4:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_19\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_19:\n        /* \"contracts/block/block.sol\":1433:1615  function acceptOwnership() public {... */\n      pop\n      tag_14\n      jump(tag_21)\n        /* \"contracts/block/block.sol\":625:645  address public owner */\n    tag_5:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_22\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_22:\n        /* \"contracts/block/block.sol\":625:645  address public owner */\n      pop\n      tag_17\n      jump(tag_24)\n        /* \"contracts/block/block.sol\":4454:4688  function converterAddress(address _token, uint32 _index) public view returns (address) {... */\n    tag_6:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_25\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_25:\n      pop\n        /* \"contracts/block/block.sol\":4454:4688  function converterAddress(address _token, uint32 _index) public view returns (address) {... */\n      tag_17\n      and(calldataload(0x4), sub(exp(0x2, 0xa0), 0x1))\n      and(calldataload(0x24), 0xffffffff)\n      jump(tag_27)\n        /* \"contracts/block/block.sol\":4914:5040  function tokenAddress(address _converter) public view returns (address) {... */\n    tag_7:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_28\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_28:\n      pop\n        /* \"contracts/block/block.sol\":4914:5040  function tokenAddress(address _converter) public view returns (address) {... */\n      tag_17\n      and(calldataload(0x4), sub(exp(0x2, 0xa0), 0x1))\n      jump(tag_30)\n        /* \"contracts/block/block.sol\":3757:3846  function tokenCount() public view returns (uint256) {... */\n    tag_8:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_31\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_31:\n        /* \"contracts/block/block.sol\":3757:3846  function tokenCount() public view returns (uint256) {... */\n      pop\n      tag_32\n      jump(tag_33)\n    tag_32:\n      0x40\n      dup1\n      mload\n      swap2\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/block/block.sol\":4065:4192  function converterCount(address _token) public view returns (uint256) {... */\n    tag_9:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_34\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_34:\n      pop\n        /* \"contracts/block/block.sol\":4065:4192  function converterCount(address _token) public view returns (uint256) {... */\n      tag_32\n      and(calldataload(0x4), sub(exp(0x2, 0xa0), 0x1))\n      jump(tag_36)\n        /* \"contracts/block/block.sol\":5280:5894  function registerConverter(address _token, address _converter)... */\n    tag_10:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_37\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_37:\n      pop\n        /* \"contracts/block/block.sol\":5280:5894  function registerConverter(address _token, address _converter)... */\n      tag_14\n      sub(exp(0x2, 0xa0), 0x1)\n      calldataload(0x4)\n      dup2\n      and\n      swap1\n      calldataload(0x24)\n      and\n      jump(tag_39)\n        /* \"contracts/block/block.sol\":651:674  address public newOwner */\n    tag_11:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_40\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_40:\n        /* \"contracts/block/block.sol\":651:674  address public newOwner */\n      pop\n      tag_17\n      jump(tag_42)\n        /* \"contracts/block/block.sol\":1210:1347  function transferOwnership(address _newOwner) public ownerOnly {... */\n    tag_12:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_43\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_43:\n      pop\n        /* \"contracts/block/block.sol\":1210:1347  function transferOwnership(address _newOwner) public ownerOnly {... */\n      tag_14\n      and(calldataload(0x4), sub(exp(0x2, 0xa0), 0x1))\n      jump(tag_45)\n        /* \"contracts/block/block.sol\":6217:7042  function unregisterConverter(address _token, uint32 _index)... */\n    tag_15:\n        /* \"contracts/block/block.sol\":6415:6432  address converter */\n      0x0\n        /* \"contracts/block/block.sol\":955:960  owner */\n      dup1\n      sload\n        /* \"contracts/block/block.sol\":6415:6432  address converter */\n      dup2\n      swap1\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":955:960  owner */\n      and\n        /* \"contracts/block/block.sol\":941:951  msg.sender */\n      caller\n        /* \"contracts/block/block.sol\":941:960  msg.sender == owner */\n      eq\n        /* \"contracts/block/block.sol\":933:961  require(msg.sender == owner) */\n      tag_47\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_47:\n        /* \"contracts/block/block.sol\":6331:6337  _token */\n      dup4\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":2089:2111  _address != address(0) */\n      dup2\n      and\n      iszero\n      iszero\n        /* \"contracts/block/block.sol\":2081:2112  require(_address != address(0)) */\n      tag_49\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_49:\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":6370:6396  tokensToConverters[_token] */\n      dup6\n      and\n      0x0\n      swap1\n      dup2\n      mstore\n        /* \"contracts/block/block.sol\":6370:6388  tokensToConverters */\n      0x3\n        /* \"contracts/block/block.sol\":6370:6396  tokensToConverters[_token] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/block/block.sol\":6370:6403  tokensToConverters[_token].length */\n      sload\n        /* \"contracts/block/block.sol\":6361:6403  _index < tokensToConverters[_token].length */\n      0xffffffff\n      dup6\n      and\n      lt\n        /* \"contracts/block/block.sol\":6353:6404  require(_index < tokensToConverters[_token].length) */\n      tag_51\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_51:\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":6435:6461  tokensToConverters[_token] */\n      dup6\n      and\n      0x0\n      swap1\n      dup2\n      mstore\n        /* \"contracts/block/block.sol\":6435:6453  tokensToConverters */\n      0x3\n        /* \"contracts/block/block.sol\":6435:6461  tokensToConverters[_token] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/block/block.sol\":6435:6469  tokensToConverters[_token][_index] */\n      dup1\n      sload\n      0xffffffff\n      dup7\n      and\n      swap1\n      dup2\n      lt\n      tag_52\n      jumpi\n      invalid\n    tag_52:\n      0x0\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n      sload\n      sub(exp(0x2, 0xa0), 0x1)\n      and\n      swap3\n      pop\n      0x1\n        /* \"contracts/block/block.sol\":6550:6560  _index + 1 */\n      dup5\n      add\n      swap2\n      pop\n        /* \"contracts/block/block.sol\":6534:6696  for (uint32 i = _index + 1; i < tokensToConverters[_token].length; i++) {... */\n    tag_54:\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":6566:6592  tokensToConverters[_token] */\n      dup6\n      and\n      0x0\n      swap1\n      dup2\n      mstore\n        /* \"contracts/block/block.sol\":6566:6584  tokensToConverters */\n      0x3\n        /* \"contracts/block/block.sol\":6566:6592  tokensToConverters[_token] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/block/block.sol\":6566:6599  tokensToConverters[_token].length */\n      sload\n        /* \"contracts/block/block.sol\":6562:6599  i < tokensToConverters[_token].length */\n      0xffffffff\n      dup4\n      and\n      lt\n        /* \"contracts/block/block.sol\":6534:6696  for (uint32 i = _index + 1; i < tokensToConverters[_token].length; i++) {... */\n      iszero\n      tag_55\n      jumpi\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":6656:6682  tokensToConverters[_token] */\n      dup6\n      and\n      0x0\n      swap1\n      dup2\n      mstore\n        /* \"contracts/block/block.sol\":6656:6674  tokensToConverters */\n      0x3\n        /* \"contracts/block/block.sol\":6656:6682  tokensToConverters[_token] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/block/block.sol\":6656:6685  tokensToConverters[_token][i] */\n      dup1\n      sload\n      0xffffffff\n      dup5\n      and\n      swap1\n      dup2\n      lt\n      tag_57\n      jumpi\n      invalid\n    tag_57:\n      0x0\n      swap2\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      keccak256\n      swap1\n      swap2\n      add\n      sload\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":6620:6646  tokensToConverters[_token] */\n      dup9\n      dup2\n      and\n      dup5\n      mstore\n        /* \"contracts/block/block.sol\":6620:6638  tokensToConverters */\n      0x3\n        /* \"contracts/block/block.sol\":6620:6646  tokensToConverters[_token] */\n      swap1\n      swap3\n      mstore\n      0x40\n      swap1\n      swap3\n      keccak256\n        /* \"contracts/block/block.sol\":6620:6653  tokensToConverters[_token][i - 1] */\n      dup1\n      sload\n        /* \"contracts/block/block.sol\":6656:6685  tokensToConverters[_token][i] */\n      swap2\n      swap1\n      swap3\n      and\n      swap2\n        /* \"contracts/block/block.sol\":6620:6646  tokensToConverters[_token] */\n      swap1\n        /* \"contracts/block/block.sol\":6620:6653  tokensToConverters[_token][i - 1] */\n      0xffffffff\n      not(0x0)\n        /* \"contracts/block/block.sol\":6647:6652  i - 1 */\n      dup7\n      add\n        /* \"contracts/block/block.sol\":6620:6653  tokensToConverters[_token][i - 1] */\n      and\n      swap1\n      dup2\n      lt\n      tag_59\n      jumpi\n      invalid\n    tag_59:\n      0x0\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n        /* \"contracts/block/block.sol\":6620:6685  tokensToConverters[_token][i - 1] = tokensToConverters[_token][i] */\n      dup1\n      sload\n      not(0xffffffffffffffffffffffffffffffffffffffff)\n      and\n      sub(exp(0x2, 0xa0), 0x1)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n      0x1\n        /* \"contracts/block/block.sol\":6601:6604  i++ */\n      swap2\n      swap1\n      swap2\n      add\n      swap1\n        /* \"contracts/block/block.sol\":6534:6696  for (uint32 i = _index + 1; i < tokensToConverters[_token].length; i++) {... */\n      jump(tag_54)\n    tag_55:\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":6778:6804  tokensToConverters[_token] */\n      dup6\n      and\n      0x0\n      swap1\n      dup2\n      mstore\n        /* \"contracts/block/block.sol\":6778:6796  tokensToConverters */\n      0x3\n        /* \"contracts/block/block.sol\":6778:6804  tokensToConverters[_token] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/block/block.sol\":6778:6813  tokensToConverters[_token].length-- */\n      dup1\n      sload\n      swap1\n      tag_61\n      swap1\n      not(0x0)\n      dup4\n      add\n      jump\t// in(tag_62)\n    tag_61:\n      pop\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":6907:6936  convertersToTokens[converter] */\n      dup1\n      dup5\n      and\n      0x0\n      dup2\n      dup2\n      mstore\n        /* \"contracts/block/block.sol\":6907:6925  convertersToTokens */\n      0x4\n        /* \"contracts/block/block.sol\":6907:6936  convertersToTokens[converter] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/block/block.sol\":6900:6936  delete convertersToTokens[converter] */\n      dup1\n      sload\n      not(0xffffffffffffffffffffffffffffffffffffffff)\n      and\n      swap1\n      sstore\n        /* \"contracts/block/block.sol\":7000:7035  ConverterRemoval(_token, converter) */\n      dup2\n      mload\n      swap3\n      dup4\n      mstore\n      swap1\n      mload\n      swap3\n      dup9\n      and\n      swap3\n      0xc3b25a6c3b7509edde0f2e6cc317b5820a901fa82ac554709206e1d7237fe294\n      swap3\n      dup2\n      swap1\n      sub\n      swap1\n      swap2\n      add\n      swap1\n      log2\n        /* \"contracts/block/block.sol\":971:972  _ */\n      pop\n        /* \"contracts/block/block.sol\":6217:7042  function unregisterConverter(address _token, uint32 _index)... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/block/block.sol\":3215:3238  address[] public tokens */\n    tag_18:\n      0x5\n      dup1\n      sload\n      dup3\n      swap1\n      dup2\n      lt\n      tag_63\n      jumpi\n      invalid\n    tag_63:\n      0x0\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n      sload\n      sub(exp(0x2, 0xa0), 0x1)\n      and\n      swap1\n      pop\n      dup2\n      jump\t// out\n        /* \"contracts/block/block.sol\":1433:1615  function acceptOwnership() public {... */\n    tag_21:\n        /* \"contracts/block/block.sol\":1499:1507  newOwner */\n      and(sub(exp(0x2, 0xa0), 0x1), sload(0x1))\n        /* \"contracts/block/block.sol\":1485:1495  msg.sender */\n      caller\n        /* \"contracts/block/block.sol\":1485:1507  msg.sender == newOwner */\n      eq\n        /* \"contracts/block/block.sol\":1477:1508  require(msg.sender == newOwner) */\n      tag_66\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_66:\n        /* \"contracts/block/block.sol\":1542:1550  newOwner */\n      sload(0x1)\n      0x0\n        /* \"contracts/block/block.sol\":1535:1540  owner */\n      dup1\n      sload\n        /* \"contracts/block/block.sol\":1523:1551  OwnerUpdate(owner, newOwner) */\n      mload(0x40)\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":1542:1550  newOwner */\n      swap4\n      dup5\n      and\n      swap4\n        /* \"contracts/block/block.sol\":1535:1540  owner */\n      swap1\n      swap2\n      and\n      swap2\n        /* \"contracts/block/block.sol\":1523:1551  OwnerUpdate(owner, newOwner) */\n      0x343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a\n      swap2\n      log3\n        /* \"contracts/block/block.sol\":1569:1577  newOwner */\n      0x1\n      dup1\n      sload\n      0x0\n        /* \"contracts/block/block.sol\":1561:1577  owner = newOwner */\n      dup1\n      sload\n      not(0xffffffffffffffffffffffffffffffffffffffff)\n      swap1\n      dup2\n      and\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":1569:1577  newOwner */\n      dup5\n      and\n        /* \"contracts/block/block.sol\":1561:1577  owner = newOwner */\n      or\n      swap1\n      swap2\n      sstore\n        /* \"contracts/block/block.sol\":1587:1608  newOwner = address(0) */\n      and\n      swap1\n      sstore\n        /* \"contracts/block/block.sol\":1433:1615  function acceptOwnership() public {... */\n      jump\t// out\n        /* \"contracts/block/block.sol\":625:645  address public owner */\n    tag_24:\n      and(sub(exp(0x2, 0xa0), 0x1), sload(0x0))\n      dup2\n      jump\t// out\n        /* \"contracts/block/block.sol\":4454:4688  function converterAddress(address _token, uint32 _index) public view returns (address) {... */\n    tag_27:\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":4565:4591  tokensToConverters[_token] */\n      dup3\n      and\n        /* \"contracts/block/block.sol\":4532:4539  address */\n      0x0\n        /* \"contracts/block/block.sol\":4565:4591  tokensToConverters[_token] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/block/block.sol\":4565:4583  tokensToConverters */\n      0x3\n        /* \"contracts/block/block.sol\":4565:4591  tokensToConverters[_token] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/block/block.sol\":4565:4598  tokensToConverters[_token].length */\n      sload\n        /* \"contracts/block/block.sol\":4555:4598  _index >= tokensToConverters[_token].length */\n      0xffffffff\n      dup4\n      and\n      lt\n        /* \"contracts/block/block.sol\":4551:4629  if (_index >= tokensToConverters[_token].length)... */\n      tag_68\n      jumpi\n      pop\n        /* \"contracts/block/block.sol\":4627:4628  0 */\n      0x0\n        /* \"contracts/block/block.sol\":4612:4629  return address(0) */\n      jump(tag_67)\n        /* \"contracts/block/block.sol\":4551:4629  if (_index >= tokensToConverters[_token].length)... */\n    tag_68:\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":4647:4673  tokensToConverters[_token] */\n      dup4\n      and\n      0x0\n      swap1\n      dup2\n      mstore\n        /* \"contracts/block/block.sol\":4647:4665  tokensToConverters */\n      0x3\n        /* \"contracts/block/block.sol\":4647:4673  tokensToConverters[_token] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/block/block.sol\":4647:4681  tokensToConverters[_token][_index] */\n      dup1\n      sload\n      0xffffffff\n      dup5\n      and\n      swap1\n      dup2\n      lt\n      tag_69\n      jumpi\n      invalid\n    tag_69:\n      0x0\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n      sload\n      sub(exp(0x2, 0xa0), 0x1)\n      and\n      swap1\n      pop\n        /* \"contracts/block/block.sol\":4454:4688  function converterAddress(address _token, uint32 _index) public view returns (address) {... */\n    tag_67:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/block/block.sol\":4914:5040  function tokenAddress(address _converter) public view returns (address) {... */\n    tag_30:\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":5003:5033  convertersToTokens[_converter] */\n      swap1\n      dup2\n      and\n        /* \"contracts/block/block.sol\":4977:4984  address */\n      0x0\n        /* \"contracts/block/block.sol\":5003:5033  convertersToTokens[_converter] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/block/block.sol\":5003:5021  convertersToTokens */\n      0x4\n        /* \"contracts/block/block.sol\":5003:5033  convertersToTokens[_converter] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      and\n      swap1\n        /* \"contracts/block/block.sol\":4914:5040  function tokenAddress(address _converter) public view returns (address) {... */\n      jump\t// out\n        /* \"contracts/block/block.sol\":3757:3846  function tokenCount() public view returns (uint256) {... */\n    tag_33:\n        /* \"contracts/block/block.sol\":3826:3832  tokens */\n      0x5\n        /* \"contracts/block/block.sol\":3826:3839  tokens.length */\n      sload\n        /* \"contracts/block/block.sol\":3757:3846  function tokenCount() public view returns (uint256) {... */\n    tag_72:\n      swap1\n      jump\t// out\n        /* \"contracts/block/block.sol\":4065:4192  function converterCount(address _token) public view returns (uint256) {... */\n    tag_36:\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":4152:4178  tokensToConverters[_token] */\n      and\n        /* \"contracts/block/block.sol\":4126:4133  uint256 */\n      0x0\n        /* \"contracts/block/block.sol\":4152:4178  tokensToConverters[_token] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/block/block.sol\":4152:4170  tokensToConverters */\n      0x3\n        /* \"contracts/block/block.sol\":4152:4178  tokensToConverters[_token] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/block/block.sol\":4152:4185  tokensToConverters[_token].length */\n      sload\n      swap1\n        /* \"contracts/block/block.sol\":4065:4192  function converterCount(address _token) public view returns (uint256) {... */\n      jump\t// out\n        /* \"contracts/block/block.sol\":5280:5894  function registerConverter(address _token, address _converter)... */\n    tag_39:\n        /* \"contracts/block/block.sol\":955:960  owner */\n      and(sub(exp(0x2, 0xa0), 0x1), sload(0x0))\n        /* \"contracts/block/block.sol\":941:951  msg.sender */\n      caller\n        /* \"contracts/block/block.sol\":941:960  msg.sender == owner */\n      eq\n        /* \"contracts/block/block.sol\":933:961  require(msg.sender == owner) */\n      tag_75\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_75:\n        /* \"contracts/block/block.sol\":5397:5403  _token */\n      dup2\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":2089:2111  _address != address(0) */\n      dup2\n      and\n      iszero\n      iszero\n        /* \"contracts/block/block.sol\":2081:2112  require(_address != address(0)) */\n      tag_77\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_77:\n        /* \"contracts/block/block.sol\":5426:5436  _converter */\n      dup2\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":2089:2111  _address != address(0) */\n      dup2\n      and\n      iszero\n      iszero\n        /* \"contracts/block/block.sol\":2081:2112  require(_address != address(0)) */\n      tag_79\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_79:\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":5460:5490  convertersToTokens[_converter] */\n      dup4\n      dup2\n      and\n        /* \"contracts/block/block.sol\":5502:5503  0 */\n      0x0\n        /* \"contracts/block/block.sol\":5460:5490  convertersToTokens[_converter] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/block/block.sol\":5460:5478  convertersToTokens */\n      0x4\n        /* \"contracts/block/block.sol\":5460:5490  convertersToTokens[_converter] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      and\n        /* \"contracts/block/block.sol\":5460:5504  convertersToTokens[_converter] == address(0) */\n      iszero\n        /* \"contracts/block/block.sol\":5452:5505  require(convertersToTokens[_converter] == address(0)) */\n      tag_81\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_81:\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":5568:5592  tokensRegistered[_token] */\n      dup5\n      and\n      0x0\n      swap1\n      dup2\n      mstore\n        /* \"contracts/block/block.sol\":5568:5584  tokensRegistered */\n      0x2\n        /* \"contracts/block/block.sol\":5568:5592  tokensRegistered[_token] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n        /* \"contracts/block/block.sol\":5567:5592  !tokensRegistered[_token] */\n      iszero\n        /* \"contracts/block/block.sol\":5563:5683  if (!tokensRegistered[_token]) {... */\n      iszero\n      tag_82\n      jumpi\n        /* \"contracts/block/block.sol\":5608:5614  tokens */\n      0x5\n        /* \"--CODEGEN--\":27:37   */\n      dup1\n      sload\n        /* \"--CODEGEN--\":39:40   */\n      0x1\n        /* \"--CODEGEN--\":23:41   */\n      dup1\n      dup3\n      add\n        /* \"--CODEGEN--\":45:68   */\n      swap1\n      swap3\n      sstore\n        /* \"contracts/block/block.sol\":5608:5627  tokens.push(_token) */\n      0x36b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0\n      add\n      dup1\n      sload\n      not(0xffffffffffffffffffffffffffffffffffffffff)\n      and\n      sub(exp(0x2, 0xa0), 0x1)\n      dup8\n      and\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n      0x0\n        /* \"contracts/block/block.sol\":5641:5665  tokensRegistered[_token] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/block/block.sol\":5641:5657  tokensRegistered */\n      0x2\n        /* \"contracts/block/block.sol\":5608:5627  tokens.push(_token) */\n      0x20\n        /* \"contracts/block/block.sol\":5641:5665  tokensRegistered[_token] */\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/block/block.sol\":5641:5672  tokensRegistered[_token] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/block/block.sol\":5563:5683  if (!tokensRegistered[_token]) {... */\n    tag_82:\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":5693:5719  tokensToConverters[_token] */\n      dup1\n      dup6\n      and\n      0x0\n      dup2\n      dup2\n      mstore\n        /* \"contracts/block/block.sol\":5693:5711  tokensToConverters */\n      0x3\n        /* \"contracts/block/block.sol\":5693:5719  tokensToConverters[_token] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"--CODEGEN--\":27:37   */\n      dup1\n      sload\n        /* \"--CODEGEN--\":39:40   */\n      0x1\n        /* \"--CODEGEN--\":23:41   */\n      dup2\n      add\n        /* \"--CODEGEN--\":45:68   */\n      dup3\n      sstore\n        /* \"contracts/block/block.sol\":5693:5736  tokensToConverters[_token].push(_converter) */\n      swap1\n      dup5\n      mstore\n      dup3\n      dup5\n      keccak256\n      add\n      dup1\n      sload\n      swap6\n      dup10\n      and\n      not(0xffffffffffffffffffffffffffffffffffffffff)\n      swap7\n      dup8\n      and\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"contracts/block/block.sol\":5746:5776  convertersToTokens[_converter] */\n      dup1\n      dup5\n      mstore\n        /* \"contracts/block/block.sol\":5746:5764  convertersToTokens */\n      0x4\n        /* \"contracts/block/block.sol\":5746:5776  convertersToTokens[_converter] */\n      dup4\n      mstore\n      swap3\n      dup2\n      swap1\n      keccak256\n        /* \"contracts/block/block.sol\":5746:5785  convertersToTokens[_converter] = _token */\n      dup1\n      sload\n      swap1\n      swap6\n      and\n      dup5\n      or\n      swap1\n      swap5\n      sstore\n        /* \"contracts/block/block.sol\":5850:5887  ConverterAddition(_token, _converter) */\n      dup4\n      mload\n      swap2\n      dup3\n      mstore\n      swap3\n      mload\n        /* \"contracts/block/block.sol\":5693:5719  tokensToConverters[_token] */\n      swap2\n      swap3\n        /* \"contracts/block/block.sol\":5850:5887  ConverterAddition(_token, _converter) */\n      0x229aec2ec4b21e700d6daf13a894e7b38c18b844b021f2eee263f04af3ea6f00\n      swap3\n      swap2\n      dup3\n      swap1\n      sub\n      add\n      swap1\n      log2\n        /* \"contracts/block/block.sol\":2122:2123  _ */\n      pop\n        /* \"contracts/block/block.sol\":971:972  _ */\n      pop\n        /* \"contracts/block/block.sol\":5280:5894  function registerConverter(address _token, address _converter)... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/block/block.sol\":651:674  address public newOwner */\n    tag_42:\n      and(sub(exp(0x2, 0xa0), 0x1), sload(0x1))\n      dup2\n      jump\t// out\n        /* \"contracts/block/block.sol\":1210:1347  function transferOwnership(address _newOwner) public ownerOnly {... */\n    tag_45:\n        /* \"contracts/block/block.sol\":955:960  owner */\n      and(sub(exp(0x2, 0xa0), 0x1), sload(0x0))\n        /* \"contracts/block/block.sol\":941:951  msg.sender */\n      caller\n        /* \"contracts/block/block.sol\":941:960  msg.sender == owner */\n      eq\n        /* \"contracts/block/block.sol\":933:961  require(msg.sender == owner) */\n      tag_86\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_86:\n        /* \"contracts/block/block.sol\":1304:1309  owner */\n      sload(0x0)\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":1291:1309  _newOwner != owner */\n      dup3\n      dup2\n      and\n        /* \"contracts/block/block.sol\":1304:1309  owner */\n      swap2\n      and\n        /* \"contracts/block/block.sol\":1291:1309  _newOwner != owner */\n      eq\n      iszero\n        /* \"contracts/block/block.sol\":1283:1310  require(_newOwner != owner) */\n      tag_88\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_88:\n        /* \"contracts/block/block.sol\":1320:1328  newOwner */\n      0x1\n        /* \"contracts/block/block.sol\":1320:1340  newOwner = _newOwner */\n      dup1\n      sload\n      not(0xffffffffffffffffffffffffffffffffffffffff)\n      and\n      sub(exp(0x2, 0xa0), 0x1)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/block/block.sol\":1210:1347  function transferOwnership(address _newOwner) public ownerOnly {... */\n      jump\t// out\n        /* \"contracts/block/block.sol\":2852:7044  contract BancorConverterRegistry is Owned, Utils {... */\n    tag_62:\n      dup2\n      sload\n      dup2\n      dup4\n      sstore\n      dup2\n      dup2\n      gt\n      iszero\n      tag_90\n      jumpi\n      0x0\n      dup4\n      dup2\n      mstore\n      0x20\n      swap1\n      keccak256\n      tag_90\n      swap2\n      dup2\n      add\n      swap1\n      dup4\n      add\n      jump\t// in(tag_91)\n    tag_90:\n      pop\n      pop\n      pop\n      jump\t// out\n    tag_91:\n      tag_72\n      swap2\n      swap1\n    tag_93:\n      dup1\n      dup3\n      gt\n      iszero\n      tag_94\n      jumpi\n      0x0\n      dup2\n      sstore\n      0x1\n      add\n      jump(tag_93)\n    tag_94:\n      pop\n      swap1\n      jump\n\n    auxdata: 0xa165627a7a7230582070d758e09e417d821b68905effc1f2ab2274830f1741898190463af90ca0673c0029\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5060008054600160a060020a0319163317905561082d806100326000396000f3006080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166338cb066f81146100b35780634f64b2be146100df57806379ba5097146101135780638da5cb5b1461012857806390ab31061461013d5780639884e801146101675780639f181b5e14610188578063cd9d4d66146101af578063d26a8d2e146101d0578063d4ee1d90146101f7578063f2fde38b1461020c575b600080fd5b3480156100bf57600080fd5b506100dd600160a060020a036004351663ffffffff6024351661022d565b005b3480156100eb57600080fd5b506100f7600435610440565b60408051600160a060020a039092168252519081900360200190f35b34801561011f57600080fd5b506100dd610468565b34801561013457600080fd5b506100f76104f0565b34801561014957600080fd5b506100f7600160a060020a036004351663ffffffff602435166104ff565b34801561017357600080fd5b506100f7600160a060020a0360043516610574565b34801561019457600080fd5b5061019d610592565b60408051918252519081900360200190f35b3480156101bb57600080fd5b5061019d600160a060020a0360043516610599565b3480156101dc57600080fd5b506100dd600160a060020a03600435811690602435166105b4565b34801561020357600080fd5b506100f761074a565b34801561021857600080fd5b506100dd600160a060020a0360043516610759565b600080548190600160a060020a0316331461024757600080fd5b83600160a060020a038116151561025d57600080fd5b600160a060020a03851660009081526003602052604090205463ffffffff85161061028757600080fd5b600160a060020a0385166000908152600360205260409020805463ffffffff86169081106102b157fe5b600091825260209091200154600160a060020a031692506001840191505b600160a060020a03851660009081526003602052604090205463ffffffff831610156103a257600160a060020a0385166000908152600360205260409020805463ffffffff841690811061031f57fe5b6000918252602080832090910154600160a060020a03888116845260039092526040909220805491909216919063ffffffff60001986011690811061036057fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055600191909101906102cf565b600160a060020a03851660009081526003602052604090208054906103cb9060001983016107ba565b50600160a060020a03808416600081815260046020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff1916905581519283529051928816927fc3b25a6c3b7509edde0f2e6cc317b5820a901fa82ac554709206e1d7237fe2949281900390910190a25050505050565b600580548290811061044e57fe5b600091825260209091200154600160a060020a0316905081565b600154600160a060020a0316331461047f57600080fd5b60015460008054604051600160a060020a0393841693909116917f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a91a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031681565b600160a060020a03821660009081526003602052604081205463ffffffff83161061052c5750600061056e565b600160a060020a0383166000908152600360205260409020805463ffffffff841690811061055657fe5b600091825260209091200154600160a060020a031690505b92915050565b600160a060020a039081166000908152600460205260409020541690565b6005545b90565b600160a060020a031660009081526003602052604090205490565b600054600160a060020a031633146105cb57600080fd5b81600160a060020a03811615156105e157600080fd5b81600160a060020a03811615156105f757600080fd5b600160a060020a03838116600090815260046020526040902054161561061c57600080fd5b600160a060020a03841660009081526002602052604090205460ff1615156106af576005805460018082019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387169081179091556000908152600260205260409020805460ff191690911790555b600160a060020a038085166000818152600360209081526040808320805460018101825590845282842001805495891673ffffffffffffffffffffffffffffffffffffffff1996871681179091558084526004835292819020805490951684179094558351918252925191927f229aec2ec4b21e700d6daf13a894e7b38c18b844b021f2eee263f04af3ea6f0092918290030190a250505050565b600154600160a060020a031681565b600054600160a060020a0316331461077057600080fd5b600054600160a060020a038281169116141561078b57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b8154818355818111156107de576000838152602090206107de9181019083016107e3565b505050565b61059691905b808211156107fd57600081556001016107e9565b50905600a165627a7a7230582070d758e09e417d821b68905effc1f2ab2274830f1741898190463af90ca0673c0029",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x82D DUP1 PUSH2 0x32 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xAE JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x38CB066F DUP2 EQ PUSH2 0xB3 JUMPI DUP1 PUSH4 0x4F64B2BE EQ PUSH2 0xDF JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x113 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x128 JUMPI DUP1 PUSH4 0x90AB3106 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0x9884E801 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0x9F181B5E EQ PUSH2 0x188 JUMPI DUP1 PUSH4 0xCD9D4D66 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0xD26A8D2E EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0xD4EE1D90 EQ PUSH2 0x1F7 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x20C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH4 0xFFFFFFFF PUSH1 0x24 CALLDATALOAD AND PUSH2 0x22D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH1 0x4 CALLDATALOAD PUSH2 0x440 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDD PUSH2 0x468 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x134 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x4F0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x149 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH4 0xFFFFFFFF PUSH1 0x24 CALLDATALOAD AND PUSH2 0x4FF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x173 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x574 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x194 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19D PUSH2 0x592 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19D PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x599 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH2 0x5B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x203 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x74A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x218 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x759 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x247 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 0x25D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH4 0xFFFFFFFF DUP6 AND LT PUSH2 0x287 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH4 0xFFFFFFFF DUP7 AND SWAP1 DUP2 LT PUSH2 0x2B1 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP3 POP PUSH1 0x1 DUP5 ADD SWAP2 POP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH4 0xFFFFFFFF DUP4 AND LT ISZERO PUSH2 0x3A2 JUMPI PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH4 0xFFFFFFFF DUP5 AND SWAP1 DUP2 LT PUSH2 0x31F JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 DUP2 AND DUP5 MSTORE PUSH1 0x3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 SWAP1 PUSH4 0xFFFFFFFF PUSH1 0x0 NOT DUP7 ADD AND SWAP1 DUP2 LT PUSH2 0x360 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x2CF JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 PUSH2 0x3CB SWAP1 PUSH1 0x0 NOT DUP4 ADD PUSH2 0x7BA JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE DUP2 MLOAD SWAP3 DUP4 MSTORE SWAP1 MLOAD SWAP3 DUP9 AND SWAP3 PUSH32 0xC3B25A6C3B7509EDDE0F2E6CC317B5820A901FA82AC554709206E1D7237FE294 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x44E JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x47F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP4 DUP5 AND SWAP4 SWAP1 SWAP2 AND SWAP2 PUSH32 0x343765429AEA5A34B3FF6A3785A98A5ABB2597ACA87BFBB58632C173D585373A SWAP2 LOG3 PUSH1 0x1 DUP1 SLOAD PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND OR SWAP1 SWAP2 SSTORE AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH4 0xFFFFFFFF DUP4 AND LT PUSH2 0x52C JUMPI POP PUSH1 0x0 PUSH2 0x56E JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH4 0xFFFFFFFF DUP5 AND SWAP1 DUP2 LT PUSH2 0x556 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND SWAP1 JUMP JUMPDEST PUSH1 0x5 SLOAD JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x5CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 0x5E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 0x5F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO PUSH2 0x61C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x6AF JUMPI PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD SWAP1 SWAP3 SSTORE PUSH32 0x36B6384B5ECA791C62761152D0C79BB0604C104A5FB6F4EB0703F3154BB3DB0 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 DUP5 MSTORE DUP3 DUP5 KECCAK256 ADD DUP1 SLOAD SWAP6 DUP10 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP7 DUP8 AND DUP2 OR SWAP1 SWAP2 SSTORE DUP1 DUP5 MSTORE PUSH1 0x4 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP6 AND DUP5 OR SWAP1 SWAP5 SSTORE DUP4 MLOAD SWAP2 DUP3 MSTORE SWAP3 MLOAD SWAP2 SWAP3 PUSH32 0x229AEC2EC4B21E700D6DAF13A894E7B38C18B844B021F2EEE263F04AF3EA6F00 SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x770 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x78B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 GT ISZERO PUSH2 0x7DE JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH2 0x7DE SWAP2 DUP2 ADD SWAP1 DUP4 ADD PUSH2 0x7E3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x596 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x7FD JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x7E9 JUMP JUMPDEST POP SWAP1 JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH17 0xD758E09E417D821B68905EFFC1F2AB2274 DUP4 0xf OR COINBASE DUP10 DUP2 SWAP1 0x46 GASPRICE 0xf9 0xc LOG0 PUSH8 0x3C00290000000000 ",
							"sourceMap": "2852:4192:0:-;;;3616:28;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;831:5:0;:18;;-1:-1:-1;;;;;;831:18:0;839:10;831:18;;;2852:4192;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "6080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166338cb066f81146100b35780634f64b2be146100df57806379ba5097146101135780638da5cb5b1461012857806390ab31061461013d5780639884e801146101675780639f181b5e14610188578063cd9d4d66146101af578063d26a8d2e146101d0578063d4ee1d90146101f7578063f2fde38b1461020c575b600080fd5b3480156100bf57600080fd5b506100dd600160a060020a036004351663ffffffff6024351661022d565b005b3480156100eb57600080fd5b506100f7600435610440565b60408051600160a060020a039092168252519081900360200190f35b34801561011f57600080fd5b506100dd610468565b34801561013457600080fd5b506100f76104f0565b34801561014957600080fd5b506100f7600160a060020a036004351663ffffffff602435166104ff565b34801561017357600080fd5b506100f7600160a060020a0360043516610574565b34801561019457600080fd5b5061019d610592565b60408051918252519081900360200190f35b3480156101bb57600080fd5b5061019d600160a060020a0360043516610599565b3480156101dc57600080fd5b506100dd600160a060020a03600435811690602435166105b4565b34801561020357600080fd5b506100f761074a565b34801561021857600080fd5b506100dd600160a060020a0360043516610759565b600080548190600160a060020a0316331461024757600080fd5b83600160a060020a038116151561025d57600080fd5b600160a060020a03851660009081526003602052604090205463ffffffff85161061028757600080fd5b600160a060020a0385166000908152600360205260409020805463ffffffff86169081106102b157fe5b600091825260209091200154600160a060020a031692506001840191505b600160a060020a03851660009081526003602052604090205463ffffffff831610156103a257600160a060020a0385166000908152600360205260409020805463ffffffff841690811061031f57fe5b6000918252602080832090910154600160a060020a03888116845260039092526040909220805491909216919063ffffffff60001986011690811061036057fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055600191909101906102cf565b600160a060020a03851660009081526003602052604090208054906103cb9060001983016107ba565b50600160a060020a03808416600081815260046020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff1916905581519283529051928816927fc3b25a6c3b7509edde0f2e6cc317b5820a901fa82ac554709206e1d7237fe2949281900390910190a25050505050565b600580548290811061044e57fe5b600091825260209091200154600160a060020a0316905081565b600154600160a060020a0316331461047f57600080fd5b60015460008054604051600160a060020a0393841693909116917f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a91a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031681565b600160a060020a03821660009081526003602052604081205463ffffffff83161061052c5750600061056e565b600160a060020a0383166000908152600360205260409020805463ffffffff841690811061055657fe5b600091825260209091200154600160a060020a031690505b92915050565b600160a060020a039081166000908152600460205260409020541690565b6005545b90565b600160a060020a031660009081526003602052604090205490565b600054600160a060020a031633146105cb57600080fd5b81600160a060020a03811615156105e157600080fd5b81600160a060020a03811615156105f757600080fd5b600160a060020a03838116600090815260046020526040902054161561061c57600080fd5b600160a060020a03841660009081526002602052604090205460ff1615156106af576005805460018082019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387169081179091556000908152600260205260409020805460ff191690911790555b600160a060020a038085166000818152600360209081526040808320805460018101825590845282842001805495891673ffffffffffffffffffffffffffffffffffffffff1996871681179091558084526004835292819020805490951684179094558351918252925191927f229aec2ec4b21e700d6daf13a894e7b38c18b844b021f2eee263f04af3ea6f0092918290030190a250505050565b600154600160a060020a031681565b600054600160a060020a0316331461077057600080fd5b600054600160a060020a038281169116141561078b57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b8154818355818111156107de576000838152602090206107de9181019083016107e3565b505050565b61059691905b808211156107fd57600081556001016107e9565b50905600a165627a7a7230582070d758e09e417d821b68905effc1f2ab2274830f1741898190463af90ca0673c0029",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xAE JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x38CB066F DUP2 EQ PUSH2 0xB3 JUMPI DUP1 PUSH4 0x4F64B2BE EQ PUSH2 0xDF JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x113 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x128 JUMPI DUP1 PUSH4 0x90AB3106 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0x9884E801 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0x9F181B5E EQ PUSH2 0x188 JUMPI DUP1 PUSH4 0xCD9D4D66 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0xD26A8D2E EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0xD4EE1D90 EQ PUSH2 0x1F7 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x20C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH4 0xFFFFFFFF PUSH1 0x24 CALLDATALOAD AND PUSH2 0x22D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH1 0x4 CALLDATALOAD PUSH2 0x440 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDD PUSH2 0x468 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x134 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x4F0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x149 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH4 0xFFFFFFFF PUSH1 0x24 CALLDATALOAD AND PUSH2 0x4FF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x173 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x574 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x194 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19D PUSH2 0x592 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19D PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x599 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH2 0x5B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x203 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x74A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x218 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x759 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x247 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 0x25D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH4 0xFFFFFFFF DUP6 AND LT PUSH2 0x287 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH4 0xFFFFFFFF DUP7 AND SWAP1 DUP2 LT PUSH2 0x2B1 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP3 POP PUSH1 0x1 DUP5 ADD SWAP2 POP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH4 0xFFFFFFFF DUP4 AND LT ISZERO PUSH2 0x3A2 JUMPI PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH4 0xFFFFFFFF DUP5 AND SWAP1 DUP2 LT PUSH2 0x31F JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 DUP2 AND DUP5 MSTORE PUSH1 0x3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 SWAP1 PUSH4 0xFFFFFFFF PUSH1 0x0 NOT DUP7 ADD AND SWAP1 DUP2 LT PUSH2 0x360 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x2CF JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 PUSH2 0x3CB SWAP1 PUSH1 0x0 NOT DUP4 ADD PUSH2 0x7BA JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE DUP2 MLOAD SWAP3 DUP4 MSTORE SWAP1 MLOAD SWAP3 DUP9 AND SWAP3 PUSH32 0xC3B25A6C3B7509EDDE0F2E6CC317B5820A901FA82AC554709206E1D7237FE294 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x44E JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x47F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP4 DUP5 AND SWAP4 SWAP1 SWAP2 AND SWAP2 PUSH32 0x343765429AEA5A34B3FF6A3785A98A5ABB2597ACA87BFBB58632C173D585373A SWAP2 LOG3 PUSH1 0x1 DUP1 SLOAD PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND OR SWAP1 SWAP2 SSTORE AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH4 0xFFFFFFFF DUP4 AND LT PUSH2 0x52C JUMPI POP PUSH1 0x0 PUSH2 0x56E JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH4 0xFFFFFFFF DUP5 AND SWAP1 DUP2 LT PUSH2 0x556 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND SWAP1 JUMP JUMPDEST PUSH1 0x5 SLOAD JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x5CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 0x5E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 0x5F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO PUSH2 0x61C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x6AF JUMPI PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD SWAP1 SWAP3 SSTORE PUSH32 0x36B6384B5ECA791C62761152D0C79BB0604C104A5FB6F4EB0703F3154BB3DB0 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 DUP5 MSTORE DUP3 DUP5 KECCAK256 ADD DUP1 SLOAD SWAP6 DUP10 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP7 DUP8 AND DUP2 OR SWAP1 SWAP2 SSTORE DUP1 DUP5 MSTORE PUSH1 0x4 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP6 AND DUP5 OR SWAP1 SWAP5 SSTORE DUP4 MLOAD SWAP2 DUP3 MSTORE SWAP3 MLOAD SWAP2 SWAP3 PUSH32 0x229AEC2EC4B21E700D6DAF13A894E7B38C18B844B021F2EEE263F04AF3EA6F00 SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x770 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x78B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 GT ISZERO PUSH2 0x7DE JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH2 0x7DE SWAP2 DUP2 ADD SWAP1 DUP4 ADD PUSH2 0x7E3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x596 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x7FD JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x7E9 JUMP JUMPDEST POP SWAP1 JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH17 0xD758E09E417D821B68905EFFC1F2AB2274 DUP4 0xf OR COINBASE DUP10 DUP2 SWAP1 0x46 GASPRICE 0xf9 0xc LOG0 PUSH8 0x3C00290000000000 ",
							"sourceMap": "2852:4192:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6217:825;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;6217:825:0;-1:-1:-1;;;;;6217:825:0;;;;;;;;;;;3215:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3215:23:0;;;;;;;;;-1:-1:-1;;;;;3215:23:0;;;;;;;;;;;;;;1433:182;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1433:182:0;;;;625:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;625:20:0;;;;4454:234;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4454:234:0;-1:-1:-1;;;;;4454:234:0;;;;;;;;;4914:126;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4914:126:0;-1:-1:-1;;;;;4914:126:0;;;;;3757:89;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3757:89:0;;;;;;;;;;;;;;;;;;;;4065:127;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4065:127:0;-1:-1:-1;;;;;4065:127:0;;;;;5280:614;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5280:614:0;-1:-1:-1;;;;;5280:614:0;;;;;;;;;;651:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;651:23:0;;;;1210:137;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1210:137:0;-1:-1:-1;;;;;1210:137:0;;;;;6217:825;6415:17;955:5;;6415:17;;-1:-1:-1;;;;;955:5:0;941:10;:19;933:28;;;;;;6331:6;-1:-1:-1;;;;;2089:22:0;;;;2081:31;;;;;;-1:-1:-1;;;;;6370:26:0;;;;;;:18;:26;;;;;:33;6361:42;;;;6353:51;;;;;;-1:-1:-1;;;;;6435:26:0;;;;;;:18;:26;;;;;:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6435:34:0;;-1:-1:-1;6435:34:0;6550:10;;;-1:-1:-1;6534:162:0;-1:-1:-1;;;;;6566:26:0;;;;;;:18;:26;;;;;:33;6562:37;;;;6534:162;;;-1:-1:-1;;;;;6656:26:0;;;;;;:18;:26;;;;;:29;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6620:26:0;;;;;:18;:26;;;;;;;:33;;6656:29;;;;;6620:26;:33;-1:-1:-1;;6647:5:0;;6620:33;;;;;;;;;;;;;;;;;:65;;-1:-1:-1;;6620:65:0;-1:-1:-1;;;;;6620:65:0;;;;;;;;;;-1:-1:-1;6601:3:0;;;;;6534:162;;;-1:-1:-1;;;;;6778:26:0;;;;;;:18;:26;;;;;:35;;;;;-1:-1:-1;;6778:35:0;;;:::i;:::-;-1:-1:-1;;;;;;6907:29:0;;;;;;;:18;:29;;;;;;;;;6900:36;;-1:-1:-1;;6900:36:0;;;7000:35;;;;;;;;;;;;;;;;;;;;;971:1;6217:825;;;;:::o;3215:23::-;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3215:23:0;;-1:-1:-1;3215:23:0;:::o;1433:182::-;1499:8;;-1:-1:-1;;;;;1499:8:0;1485:10;:22;1477:31;;;;;;1542:8;;;1535:5;;1523:28;;-1:-1:-1;;;;;1542:8:0;;;;1535:5;;;;1523:28;;;1569:8;;;;1561:16;;-1:-1:-1;;1561:16:0;;;-1:-1:-1;;;;;1569:8:0;;1561:16;;;;1587:21;;;1433:182::o;625:20::-;;;-1:-1:-1;;;;;625:20:0;;:::o;4454:234::-;-1:-1:-1;;;;;4565:26:0;;4532:7;4565:26;;;:18;:26;;;;;:33;4555:43;;;;4551:78;;-1:-1:-1;4627:1:0;4612:17;;4551:78;-1:-1:-1;;;;;4647:26:0;;;;;;:18;:26;;;;;:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4647:34:0;;-1:-1:-1;4454:234:0;;;;;:::o;4914:126::-;-1:-1:-1;;;;;5003:30:0;;;4977:7;5003:30;;;:18;:30;;;;;;;;4914:126::o;3757:89::-;3826:6;:13;3757:89;;:::o;4065:127::-;-1:-1:-1;;;;;4152:26:0;4126:7;4152:26;;;:18;:26;;;;;:33;;4065:127::o;5280:614::-;955:5;;-1:-1:-1;;;;;955:5:0;941:10;:19;933:28;;;;;;5397:6;-1:-1:-1;;;;;2089:22:0;;;;2081:31;;;;;;5426:10;-1:-1:-1;;;;;2089:22:0;;;;2081:31;;;;;;-1:-1:-1;;;;;5460:30:0;;;5502:1;5460:30;;;:18;:30;;;;;;;:44;5452:53;;;;;;-1:-1:-1;;;;;5568:24:0;;;;;;:16;:24;;;;;;;;5567:25;5563:120;;;5608:6;27:10:-1;;39:1;23:18;;;45:23;;;5608:19:0;;;;-1:-1:-1;;5608:19:0;-1:-1:-1;;;;;5608:19:0;;;;;;;;-1:-1:-1;5641:24:0;;;:16;5608:19;5641:24;;;;:31;;-1:-1:-1;;5641:31:0;;;;;;5563:120;-1:-1:-1;;;;;5693:26:0;;;;;;;:18;:26;;;;;;;;27:10:-1;;39:1;23:18;;45:23;;5693:43:0;;;;;;;;;;;;-1:-1:-1;;5693:43:0;;;;;;;;5746:30;;;:18;:30;;;;;;:39;;;;;;;;;;5850:37;;;;;;;5693:26;;5850:37;;;;;;;;;2122:1;971;5280:614;;:::o;651:23::-;;;-1:-1:-1;;;;;651:23:0;;:::o;1210:137::-;955:5;;-1:-1:-1;;;;;955:5:0;941:10;:19;933:28;;;;;;1304:5;;-1:-1:-1;;;;;1291:18:0;;;1304:5;;1291:18;;1283:27;;;;;;1320:8;:20;;-1:-1:-1;;1320:20:0;-1:-1:-1;;;;;1320:20:0;;;;;;;;;;1210:137::o;2852:4192::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "418600",
								"executionCost": "20747",
								"totalCost": "439347"
							},
							"external": {
								"acceptOwnership()": "43008",
								"converterAddress(address,uint32)": "1543",
								"converterCount(address)": "760",
								"newOwner()": "735",
								"owner()": "603",
								"registerConverter(address,address)": "124878",
								"tokenAddress(address)": "803",
								"tokenCount()": "517",
								"tokens(uint256)": "859",
								"transferOwnership(address)": "21352",
								"unregisterConverter(address,uint32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 2852,
									"end": 7044,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 2852,
									"end": 7044,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 2852,
									"end": 7044,
									"name": "MSTORE"
								},
								{
									"begin": 3616,
									"end": 3644,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP"
								},
								{
									"begin": 831,
									"end": 836,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 831,
									"end": 849,
									"name": "DUP1"
								},
								{
									"begin": 831,
									"end": 849,
									"name": "SLOAD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "EXP"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT"
								},
								{
									"begin": 831,
									"end": 849,
									"name": "AND"
								},
								{
									"begin": 839,
									"end": 849,
									"name": "CALLER"
								},
								{
									"begin": 831,
									"end": 849,
									"name": "OR"
								},
								{
									"begin": 831,
									"end": 849,
									"name": "SWAP1"
								},
								{
									"begin": 831,
									"end": 849,
									"name": "SSTORE"
								},
								{
									"begin": 2852,
									"end": 7044,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 2852,
									"end": 7044,
									"name": "DUP1"
								},
								{
									"begin": 2852,
									"end": 7044,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 2852,
									"end": 7044,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 2852,
									"end": 7044,
									"name": "CODECOPY"
								},
								{
									"begin": 2852,
									"end": 7044,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 2852,
									"end": 7044,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a165627a7a7230582070d758e09e417d821b68905effc1f2ab2274830f1741898190463af90ca0673c0029",
									".code": [
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "MSTORE"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "LT"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH [tag]",
											"value": "1"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMPI"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH",
											"value": "100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DIV"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "AND"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH",
											"value": "38CB066F"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP2"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "EQ"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMPI"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP1"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH",
											"value": "4F64B2BE"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "EQ"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH [tag]",
											"value": "3"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMPI"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP1"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH",
											"value": "79BA5097"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "EQ"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH [tag]",
											"value": "4"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMPI"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP1"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH",
											"value": "8DA5CB5B"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "EQ"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH [tag]",
											"value": "5"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMPI"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP1"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH",
											"value": "90AB3106"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "EQ"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH [tag]",
											"value": "6"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMPI"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP1"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH",
											"value": "9884E801"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "EQ"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH [tag]",
											"value": "7"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMPI"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP1"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH",
											"value": "9F181B5E"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "EQ"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH [tag]",
											"value": "8"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMPI"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP1"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH",
											"value": "CD9D4D66"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "EQ"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH [tag]",
											"value": "9"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMPI"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP1"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH",
											"value": "D26A8D2E"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "EQ"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH [tag]",
											"value": "10"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMPI"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP1"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH",
											"value": "D4EE1D90"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "EQ"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH [tag]",
											"value": "11"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMPI"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP1"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH",
											"value": "F2FDE38B"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "EQ"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH [tag]",
											"value": "12"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMPI"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "tag",
											"value": "1"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMPDEST"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP1"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "REVERT"
										},
										{
											"begin": 6217,
											"end": 7042,
											"name": "tag",
											"value": "2"
										},
										{
											"begin": 6217,
											"end": 7042,
											"name": "JUMPDEST"
										},
										{
											"begin": 6217,
											"end": 7042,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "13"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "13"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 6217,
											"end": 7042,
											"name": "PUSH [tag]",
											"value": "14"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 6217,
											"end": 7042,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 6217,
											"end": 7042,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 6217,
											"end": 7042,
											"name": "AND"
										},
										{
											"begin": 6217,
											"end": 7042,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 6217,
											"end": 7042,
											"name": "PUSH",
											"value": "24"
										},
										{
											"begin": 6217,
											"end": 7042,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 6217,
											"end": 7042,
											"name": "AND"
										},
										{
											"begin": 6217,
											"end": 7042,
											"name": "PUSH [tag]",
											"value": "15"
										},
										{
											"begin": 6217,
											"end": 7042,
											"name": "JUMP"
										},
										{
											"begin": 6217,
											"end": 7042,
											"name": "tag",
											"value": "14"
										},
										{
											"begin": 6217,
											"end": 7042,
											"name": "JUMPDEST"
										},
										{
											"begin": 6217,
											"end": 7042,
											"name": "STOP"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "tag",
											"value": "3"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "JUMPDEST"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "16"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "16"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "PUSH [tag]",
											"value": "18"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "JUMP"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "tag",
											"value": "17"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "JUMPDEST"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "DUP1"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "SWAP1"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "SWAP3"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "AND"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "DUP3"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "MSTORE"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "MLOAD"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "SWAP1"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "DUP2"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "SWAP1"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "SUB"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "ADD"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "SWAP1"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "RETURN"
										},
										{
											"begin": 1433,
											"end": 1615,
											"name": "tag",
											"value": "4"
										},
										{
											"begin": 1433,
											"end": 1615,
											"name": "JUMPDEST"
										},
										{
											"begin": 1433,
											"end": 1615,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "19"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "19"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 1433,
											"end": 1615,
											"name": "POP"
										},
										{
											"begin": 1433,
											"end": 1615,
											"name": "PUSH [tag]",
											"value": "14"
										},
										{
											"begin": 1433,
											"end": 1615,
											"name": "PUSH [tag]",
											"value": "21"
										},
										{
											"begin": 1433,
											"end": 1615,
											"name": "JUMP"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "tag",
											"value": "5"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "JUMPDEST"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "22"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "22"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "POP"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "PUSH [tag]",
											"value": "24"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "JUMP"
										},
										{
											"begin": 4454,
											"end": 4688,
											"name": "tag",
											"value": "6"
										},
										{
											"begin": 4454,
											"end": 4688,
											"name": "JUMPDEST"
										},
										{
											"begin": 4454,
											"end": 4688,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "25"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "25"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 4454,
											"end": 4688,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 4454,
											"end": 4688,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 4454,
											"end": 4688,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 4454,
											"end": 4688,
											"name": "AND"
										},
										{
											"begin": 4454,
											"end": 4688,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 4454,
											"end": 4688,
											"name": "PUSH",
											"value": "24"
										},
										{
											"begin": 4454,
											"end": 4688,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 4454,
											"end": 4688,
											"name": "AND"
										},
										{
											"begin": 4454,
											"end": 4688,
											"name": "PUSH [tag]",
											"value": "27"
										},
										{
											"begin": 4454,
											"end": 4688,
											"name": "JUMP"
										},
										{
											"begin": 4914,
											"end": 5040,
											"name": "tag",
											"value": "7"
										},
										{
											"begin": 4914,
											"end": 5040,
											"name": "JUMPDEST"
										},
										{
											"begin": 4914,
											"end": 5040,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "28"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "28"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 4914,
											"end": 5040,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 4914,
											"end": 5040,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 4914,
											"end": 5040,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 4914,
											"end": 5040,
											"name": "AND"
										},
										{
											"begin": 4914,
											"end": 5040,
											"name": "PUSH [tag]",
											"value": "30"
										},
										{
											"begin": 4914,
											"end": 5040,
											"name": "JUMP"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "tag",
											"value": "8"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "JUMPDEST"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "31"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "31"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "POP"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "PUSH [tag]",
											"value": "32"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "PUSH [tag]",
											"value": "33"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "JUMP"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "tag",
											"value": "32"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "JUMPDEST"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "DUP1"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "MLOAD"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "SWAP2"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "DUP3"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "MSTORE"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "MLOAD"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "SWAP1"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "DUP2"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "SWAP1"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "SUB"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "ADD"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "SWAP1"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "RETURN"
										},
										{
											"begin": 4065,
											"end": 4192,
											"name": "tag",
											"value": "9"
										},
										{
											"begin": 4065,
											"end": 4192,
											"name": "JUMPDEST"
										},
										{
											"begin": 4065,
											"end": 4192,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "34"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "34"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 4065,
											"end": 4192,
											"name": "PUSH [tag]",
											"value": "32"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 4065,
											"end": 4192,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 4065,
											"end": 4192,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 4065,
											"end": 4192,
											"name": "AND"
										},
										{
											"begin": 4065,
											"end": 4192,
											"name": "PUSH [tag]",
											"value": "36"
										},
										{
											"begin": 4065,
											"end": 4192,
											"name": "JUMP"
										},
										{
											"begin": 5280,
											"end": 5894,
											"name": "tag",
											"value": "10"
										},
										{
											"begin": 5280,
											"end": 5894,
											"name": "JUMPDEST"
										},
										{
											"begin": 5280,
											"end": 5894,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "37"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "37"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 5280,
											"end": 5894,
											"name": "PUSH [tag]",
											"value": "14"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 5280,
											"end": 5894,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 5280,
											"end": 5894,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 5280,
											"end": 5894,
											"name": "DUP2"
										},
										{
											"begin": 5280,
											"end": 5894,
											"name": "AND"
										},
										{
											"begin": 5280,
											"end": 5894,
											"name": "SWAP1"
										},
										{
											"begin": 5280,
											"end": 5894,
											"name": "PUSH",
											"value": "24"
										},
										{
											"begin": 5280,
											"end": 5894,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 5280,
											"end": 5894,
											"name": "AND"
										},
										{
											"begin": 5280,
											"end": 5894,
											"name": "PUSH [tag]",
											"value": "39"
										},
										{
											"begin": 5280,
											"end": 5894,
											"name": "JUMP"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "tag",
											"value": "11"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "JUMPDEST"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "40"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "40"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "POP"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "PUSH [tag]",
											"value": "42"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "JUMP"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "tag",
											"value": "12"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "JUMPDEST"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "43"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "43"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "PUSH [tag]",
											"value": "14"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "AND"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "PUSH [tag]",
											"value": "45"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "JUMP"
										},
										{
											"begin": 6217,
											"end": 7042,
											"name": "tag",
											"value": "15"
										},
										{
											"begin": 6217,
											"end": 7042,
											"name": "JUMPDEST"
										},
										{
											"begin": 6415,
											"end": 6432,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 955,
											"end": 960,
											"name": "DUP1"
										},
										{
											"begin": 955,
											"end": 960,
											"name": "SLOAD"
										},
										{
											"begin": 6415,
											"end": 6432,
											"name": "DUP2"
										},
										{
											"begin": 6415,
											"end": 6432,
											"name": "SWAP1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 955,
											"end": 960,
											"name": "AND"
										},
										{
											"begin": 941,
											"end": 951,
											"name": "CALLER"
										},
										{
											"begin": 941,
											"end": 960,
											"name": "EQ"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "PUSH [tag]",
											"value": "47"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "JUMPI"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "DUP1"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "REVERT"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "tag",
											"value": "47"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "JUMPDEST"
										},
										{
											"begin": 6331,
											"end": 6337,
											"name": "DUP4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 2089,
											"end": 2111,
											"name": "DUP2"
										},
										{
											"begin": 2089,
											"end": 2111,
											"name": "AND"
										},
										{
											"begin": 2089,
											"end": 2111,
											"name": "ISZERO"
										},
										{
											"begin": 2089,
											"end": 2111,
											"name": "ISZERO"
										},
										{
											"begin": 2081,
											"end": 2112,
											"name": "PUSH [tag]",
											"value": "49"
										},
										{
											"begin": 2081,
											"end": 2112,
											"name": "JUMPI"
										},
										{
											"begin": 2081,
											"end": 2112,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2081,
											"end": 2112,
											"name": "DUP1"
										},
										{
											"begin": 2081,
											"end": 2112,
											"name": "REVERT"
										},
										{
											"begin": 2081,
											"end": 2112,
											"name": "tag",
											"value": "49"
										},
										{
											"begin": 2081,
											"end": 2112,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 6370,
											"end": 6396,
											"name": "DUP6"
										},
										{
											"begin": 6370,
											"end": 6396,
											"name": "AND"
										},
										{
											"begin": 6370,
											"end": 6396,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6370,
											"end": 6396,
											"name": "SWAP1"
										},
										{
											"begin": 6370,
											"end": 6396,
											"name": "DUP2"
										},
										{
											"begin": 6370,
											"end": 6396,
											"name": "MSTORE"
										},
										{
											"begin": 6370,
											"end": 6388,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 6370,
											"end": 6396,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6370,
											"end": 6396,
											"name": "MSTORE"
										},
										{
											"begin": 6370,
											"end": 6396,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 6370,
											"end": 6396,
											"name": "SWAP1"
										},
										{
											"begin": 6370,
											"end": 6396,
											"name": "KECCAK256"
										},
										{
											"begin": 6370,
											"end": 6403,
											"name": "SLOAD"
										},
										{
											"begin": 6361,
											"end": 6403,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 6361,
											"end": 6403,
											"name": "DUP6"
										},
										{
											"begin": 6361,
											"end": 6403,
											"name": "AND"
										},
										{
											"begin": 6361,
											"end": 6403,
											"name": "LT"
										},
										{
											"begin": 6353,
											"end": 6404,
											"name": "PUSH [tag]",
											"value": "51"
										},
										{
											"begin": 6353,
											"end": 6404,
											"name": "JUMPI"
										},
										{
											"begin": 6353,
											"end": 6404,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6353,
											"end": 6404,
											"name": "DUP1"
										},
										{
											"begin": 6353,
											"end": 6404,
											"name": "REVERT"
										},
										{
											"begin": 6353,
											"end": 6404,
											"name": "tag",
											"value": "51"
										},
										{
											"begin": 6353,
											"end": 6404,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 6435,
											"end": 6461,
											"name": "DUP6"
										},
										{
											"begin": 6435,
											"end": 6461,
											"name": "AND"
										},
										{
											"begin": 6435,
											"end": 6461,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6435,
											"end": 6461,
											"name": "SWAP1"
										},
										{
											"begin": 6435,
											"end": 6461,
											"name": "DUP2"
										},
										{
											"begin": 6435,
											"end": 6461,
											"name": "MSTORE"
										},
										{
											"begin": 6435,
											"end": 6453,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 6435,
											"end": 6461,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6435,
											"end": 6461,
											"name": "MSTORE"
										},
										{
											"begin": 6435,
											"end": 6461,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 6435,
											"end": 6461,
											"name": "SWAP1"
										},
										{
											"begin": 6435,
											"end": 6461,
											"name": "KECCAK256"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "DUP1"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "SLOAD"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "DUP7"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "AND"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "SWAP1"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "DUP2"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "LT"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "PUSH [tag]",
											"value": "52"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "JUMPI"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "INVALID"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "tag",
											"value": "52"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "JUMPDEST"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "SWAP2"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "DUP3"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "MSTORE"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "SWAP1"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "SWAP2"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "KECCAK256"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "ADD"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "AND"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "SWAP3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 6435,
											"end": 6469,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 6550,
											"end": 6560,
											"name": "DUP5"
										},
										{
											"begin": 6550,
											"end": 6560,
											"name": "ADD"
										},
										{
											"begin": 6550,
											"end": 6560,
											"name": "SWAP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 6534,
											"end": 6696,
											"name": "tag",
											"value": "54"
										},
										{
											"begin": 6534,
											"end": 6696,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 6566,
											"end": 6592,
											"name": "DUP6"
										},
										{
											"begin": 6566,
											"end": 6592,
											"name": "AND"
										},
										{
											"begin": 6566,
											"end": 6592,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6566,
											"end": 6592,
											"name": "SWAP1"
										},
										{
											"begin": 6566,
											"end": 6592,
											"name": "DUP2"
										},
										{
											"begin": 6566,
											"end": 6592,
											"name": "MSTORE"
										},
										{
											"begin": 6566,
											"end": 6584,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 6566,
											"end": 6592,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6566,
											"end": 6592,
											"name": "MSTORE"
										},
										{
											"begin": 6566,
											"end": 6592,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 6566,
											"end": 6592,
											"name": "SWAP1"
										},
										{
											"begin": 6566,
											"end": 6592,
											"name": "KECCAK256"
										},
										{
											"begin": 6566,
											"end": 6599,
											"name": "SLOAD"
										},
										{
											"begin": 6562,
											"end": 6599,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 6562,
											"end": 6599,
											"name": "DUP4"
										},
										{
											"begin": 6562,
											"end": 6599,
											"name": "AND"
										},
										{
											"begin": 6562,
											"end": 6599,
											"name": "LT"
										},
										{
											"begin": 6534,
											"end": 6696,
											"name": "ISZERO"
										},
										{
											"begin": 6534,
											"end": 6696,
											"name": "PUSH [tag]",
											"value": "55"
										},
										{
											"begin": 6534,
											"end": 6696,
											"name": "JUMPI"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 6656,
											"end": 6682,
											"name": "DUP6"
										},
										{
											"begin": 6656,
											"end": 6682,
											"name": "AND"
										},
										{
											"begin": 6656,
											"end": 6682,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6656,
											"end": 6682,
											"name": "SWAP1"
										},
										{
											"begin": 6656,
											"end": 6682,
											"name": "DUP2"
										},
										{
											"begin": 6656,
											"end": 6682,
											"name": "MSTORE"
										},
										{
											"begin": 6656,
											"end": 6674,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 6656,
											"end": 6682,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6656,
											"end": 6682,
											"name": "MSTORE"
										},
										{
											"begin": 6656,
											"end": 6682,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 6656,
											"end": 6682,
											"name": "SWAP1"
										},
										{
											"begin": 6656,
											"end": 6682,
											"name": "KECCAK256"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "DUP1"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "SLOAD"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "DUP5"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "AND"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "SWAP1"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "DUP2"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "LT"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "PUSH [tag]",
											"value": "57"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "JUMPI"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "INVALID"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "tag",
											"value": "57"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "JUMPDEST"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "SWAP2"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "DUP3"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "MSTORE"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "DUP1"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "DUP4"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "KECCAK256"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "SWAP1"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "SWAP2"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "ADD"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 6620,
											"end": 6646,
											"name": "DUP9"
										},
										{
											"begin": 6620,
											"end": 6646,
											"name": "DUP2"
										},
										{
											"begin": 6620,
											"end": 6646,
											"name": "AND"
										},
										{
											"begin": 6620,
											"end": 6646,
											"name": "DUP5"
										},
										{
											"begin": 6620,
											"end": 6646,
											"name": "MSTORE"
										},
										{
											"begin": 6620,
											"end": 6638,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 6620,
											"end": 6646,
											"name": "SWAP1"
										},
										{
											"begin": 6620,
											"end": 6646,
											"name": "SWAP3"
										},
										{
											"begin": 6620,
											"end": 6646,
											"name": "MSTORE"
										},
										{
											"begin": 6620,
											"end": 6646,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 6620,
											"end": 6646,
											"name": "SWAP1"
										},
										{
											"begin": 6620,
											"end": 6646,
											"name": "SWAP3"
										},
										{
											"begin": 6620,
											"end": 6646,
											"name": "KECCAK256"
										},
										{
											"begin": 6620,
											"end": 6653,
											"name": "DUP1"
										},
										{
											"begin": 6620,
											"end": 6653,
											"name": "SLOAD"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "SWAP2"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "SWAP1"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "SWAP3"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "AND"
										},
										{
											"begin": 6656,
											"end": 6685,
											"name": "SWAP2"
										},
										{
											"begin": 6620,
											"end": 6646,
											"name": "SWAP1"
										},
										{
											"begin": 6620,
											"end": 6653,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT"
										},
										{
											"begin": 6647,
											"end": 6652,
											"name": "DUP7"
										},
										{
											"begin": 6647,
											"end": 6652,
											"name": "ADD"
										},
										{
											"begin": 6620,
											"end": 6653,
											"name": "AND"
										},
										{
											"begin": 6620,
											"end": 6653,
											"name": "SWAP1"
										},
										{
											"begin": 6620,
											"end": 6653,
											"name": "DUP2"
										},
										{
											"begin": 6620,
											"end": 6653,
											"name": "LT"
										},
										{
											"begin": 6620,
											"end": 6653,
											"name": "PUSH [tag]",
											"value": "59"
										},
										{
											"begin": 6620,
											"end": 6653,
											"name": "JUMPI"
										},
										{
											"begin": 6620,
											"end": 6653,
											"name": "INVALID"
										},
										{
											"begin": 6620,
											"end": 6653,
											"name": "tag",
											"value": "59"
										},
										{
											"begin": 6620,
											"end": 6653,
											"name": "JUMPDEST"
										},
										{
											"begin": 6620,
											"end": 6653,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6620,
											"end": 6653,
											"name": "SWAP2"
										},
										{
											"begin": 6620,
											"end": 6653,
											"name": "DUP3"
										},
										{
											"begin": 6620,
											"end": 6653,
											"name": "MSTORE"
										},
										{
											"begin": 6620,
											"end": 6653,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6620,
											"end": 6653,
											"name": "SWAP1"
										},
										{
											"begin": 6620,
											"end": 6653,
											"name": "SWAP2"
										},
										{
											"begin": 6620,
											"end": 6653,
											"name": "KECCAK256"
										},
										{
											"begin": 6620,
											"end": 6653,
											"name": "ADD"
										},
										{
											"begin": 6620,
											"end": 6685,
											"name": "DUP1"
										},
										{
											"begin": 6620,
											"end": 6685,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT"
										},
										{
											"begin": 6620,
											"end": 6685,
											"name": "AND"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 6620,
											"end": 6685,
											"name": "SWAP3"
										},
										{
											"begin": 6620,
											"end": 6685,
											"name": "SWAP1"
										},
										{
											"begin": 6620,
											"end": 6685,
											"name": "SWAP3"
										},
										{
											"begin": 6620,
											"end": 6685,
											"name": "AND"
										},
										{
											"begin": 6620,
											"end": 6685,
											"name": "SWAP2"
										},
										{
											"begin": 6620,
											"end": 6685,
											"name": "SWAP1"
										},
										{
											"begin": 6620,
											"end": 6685,
											"name": "SWAP2"
										},
										{
											"begin": 6620,
											"end": 6685,
											"name": "OR"
										},
										{
											"begin": 6620,
											"end": 6685,
											"name": "SWAP1"
										},
										{
											"begin": 6620,
											"end": 6685,
											"name": "SSTORE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 6601,
											"end": 6604,
											"name": "SWAP2"
										},
										{
											"begin": 6601,
											"end": 6604,
											"name": "SWAP1"
										},
										{
											"begin": 6601,
											"end": 6604,
											"name": "SWAP2"
										},
										{
											"begin": 6601,
											"end": 6604,
											"name": "ADD"
										},
										{
											"begin": 6601,
											"end": 6604,
											"name": "SWAP1"
										},
										{
											"begin": 6534,
											"end": 6696,
											"name": "PUSH [tag]",
											"value": "54"
										},
										{
											"begin": 6534,
											"end": 6696,
											"name": "JUMP"
										},
										{
											"begin": 6534,
											"end": 6696,
											"name": "tag",
											"value": "55"
										},
										{
											"begin": 6534,
											"end": 6696,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 6778,
											"end": 6804,
											"name": "DUP6"
										},
										{
											"begin": 6778,
											"end": 6804,
											"name": "AND"
										},
										{
											"begin": 6778,
											"end": 6804,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6778,
											"end": 6804,
											"name": "SWAP1"
										},
										{
											"begin": 6778,
											"end": 6804,
											"name": "DUP2"
										},
										{
											"begin": 6778,
											"end": 6804,
											"name": "MSTORE"
										},
										{
											"begin": 6778,
											"end": 6796,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 6778,
											"end": 6804,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6778,
											"end": 6804,
											"name": "MSTORE"
										},
										{
											"begin": 6778,
											"end": 6804,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 6778,
											"end": 6804,
											"name": "SWAP1"
										},
										{
											"begin": 6778,
											"end": 6804,
											"name": "KECCAK256"
										},
										{
											"begin": 6778,
											"end": 6813,
											"name": "DUP1"
										},
										{
											"begin": 6778,
											"end": 6813,
											"name": "SLOAD"
										},
										{
											"begin": 6778,
											"end": 6813,
											"name": "SWAP1"
										},
										{
											"begin": 6778,
											"end": 6813,
											"name": "PUSH [tag]",
											"value": "61"
										},
										{
											"begin": 6778,
											"end": 6813,
											"name": "SWAP1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT"
										},
										{
											"begin": 6778,
											"end": 6813,
											"name": "DUP4"
										},
										{
											"begin": 6778,
											"end": 6813,
											"name": "ADD"
										},
										{
											"begin": 6778,
											"end": 6813,
											"name": "PUSH [tag]",
											"value": "62"
										},
										{
											"begin": 6778,
											"end": 6813,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 6778,
											"end": 6813,
											"name": "tag",
											"value": "61"
										},
										{
											"begin": 6778,
											"end": 6813,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 6907,
											"end": 6936,
											"name": "DUP1"
										},
										{
											"begin": 6907,
											"end": 6936,
											"name": "DUP5"
										},
										{
											"begin": 6907,
											"end": 6936,
											"name": "AND"
										},
										{
											"begin": 6907,
											"end": 6936,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6907,
											"end": 6936,
											"name": "DUP2"
										},
										{
											"begin": 6907,
											"end": 6936,
											"name": "DUP2"
										},
										{
											"begin": 6907,
											"end": 6936,
											"name": "MSTORE"
										},
										{
											"begin": 6907,
											"end": 6925,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 6907,
											"end": 6936,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6907,
											"end": 6936,
											"name": "SWAP1"
										},
										{
											"begin": 6907,
											"end": 6936,
											"name": "DUP2"
										},
										{
											"begin": 6907,
											"end": 6936,
											"name": "MSTORE"
										},
										{
											"begin": 6907,
											"end": 6936,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 6907,
											"end": 6936,
											"name": "SWAP2"
										},
										{
											"begin": 6907,
											"end": 6936,
											"name": "DUP3"
										},
										{
											"begin": 6907,
											"end": 6936,
											"name": "SWAP1"
										},
										{
											"begin": 6907,
											"end": 6936,
											"name": "KECCAK256"
										},
										{
											"begin": 6900,
											"end": 6936,
											"name": "DUP1"
										},
										{
											"begin": 6900,
											"end": 6936,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT"
										},
										{
											"begin": 6900,
											"end": 6936,
											"name": "AND"
										},
										{
											"begin": 6900,
											"end": 6936,
											"name": "SWAP1"
										},
										{
											"begin": 6900,
											"end": 6936,
											"name": "SSTORE"
										},
										{
											"begin": 7000,
											"end": 7035,
											"name": "DUP2"
										},
										{
											"begin": 7000,
											"end": 7035,
											"name": "MLOAD"
										},
										{
											"begin": 7000,
											"end": 7035,
											"name": "SWAP3"
										},
										{
											"begin": 7000,
											"end": 7035,
											"name": "DUP4"
										},
										{
											"begin": 7000,
											"end": 7035,
											"name": "MSTORE"
										},
										{
											"begin": 7000,
											"end": 7035,
											"name": "SWAP1"
										},
										{
											"begin": 7000,
											"end": 7035,
											"name": "MLOAD"
										},
										{
											"begin": 7000,
											"end": 7035,
											"name": "SWAP3"
										},
										{
											"begin": 7000,
											"end": 7035,
											"name": "DUP9"
										},
										{
											"begin": 7000,
											"end": 7035,
											"name": "AND"
										},
										{
											"begin": 7000,
											"end": 7035,
											"name": "SWAP3"
										},
										{
											"begin": 7000,
											"end": 7035,
											"name": "PUSH",
											"value": "C3B25A6C3B7509EDDE0F2E6CC317B5820A901FA82AC554709206E1D7237FE294"
										},
										{
											"begin": 7000,
											"end": 7035,
											"name": "SWAP3"
										},
										{
											"begin": 7000,
											"end": 7035,
											"name": "DUP2"
										},
										{
											"begin": 7000,
											"end": 7035,
											"name": "SWAP1"
										},
										{
											"begin": 7000,
											"end": 7035,
											"name": "SUB"
										},
										{
											"begin": 7000,
											"end": 7035,
											"name": "SWAP1"
										},
										{
											"begin": 7000,
											"end": 7035,
											"name": "SWAP2"
										},
										{
											"begin": 7000,
											"end": 7035,
											"name": "ADD"
										},
										{
											"begin": 7000,
											"end": 7035,
											"name": "SWAP1"
										},
										{
											"begin": 7000,
											"end": 7035,
											"name": "LOG2"
										},
										{
											"begin": 971,
											"end": 972,
											"name": "POP"
										},
										{
											"begin": 6217,
											"end": 7042,
											"name": "POP"
										},
										{
											"begin": 6217,
											"end": 7042,
											"name": "POP"
										},
										{
											"begin": 6217,
											"end": 7042,
											"name": "POP"
										},
										{
											"begin": 6217,
											"end": 7042,
											"name": "POP"
										},
										{
											"begin": 6217,
											"end": 7042,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "tag",
											"value": "18"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "JUMPDEST"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "PUSH",
											"value": "5"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "DUP1"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "SLOAD"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "DUP3"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "SWAP1"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "DUP2"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "LT"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "PUSH [tag]",
											"value": "63"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "JUMPI"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "INVALID"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "tag",
											"value": "63"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "JUMPDEST"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "SWAP2"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "DUP3"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "MSTORE"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "SWAP1"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "SWAP2"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "KECCAK256"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "ADD"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "AND"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "SWAP1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "DUP2"
										},
										{
											"begin": 3215,
											"end": 3238,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1433,
											"end": 1615,
											"name": "tag",
											"value": "21"
										},
										{
											"begin": 1433,
											"end": 1615,
											"name": "JUMPDEST"
										},
										{
											"begin": 1499,
											"end": 1507,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1499,
											"end": 1507,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 1499,
											"end": 1507,
											"name": "AND"
										},
										{
											"begin": 1485,
											"end": 1495,
											"name": "CALLER"
										},
										{
											"begin": 1485,
											"end": 1507,
											"name": "EQ"
										},
										{
											"begin": 1477,
											"end": 1508,
											"name": "PUSH [tag]",
											"value": "66"
										},
										{
											"begin": 1477,
											"end": 1508,
											"name": "JUMPI"
										},
										{
											"begin": 1477,
											"end": 1508,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1477,
											"end": 1508,
											"name": "DUP1"
										},
										{
											"begin": 1477,
											"end": 1508,
											"name": "REVERT"
										},
										{
											"begin": 1477,
											"end": 1508,
											"name": "tag",
											"value": "66"
										},
										{
											"begin": 1477,
											"end": 1508,
											"name": "JUMPDEST"
										},
										{
											"begin": 1542,
											"end": 1550,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1542,
											"end": 1550,
											"name": "SLOAD"
										},
										{
											"begin": 1542,
											"end": 1550,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1535,
											"end": 1540,
											"name": "DUP1"
										},
										{
											"begin": 1535,
											"end": 1540,
											"name": "SLOAD"
										},
										{
											"begin": 1523,
											"end": 1551,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1523,
											"end": 1551,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 1542,
											"end": 1550,
											"name": "SWAP4"
										},
										{
											"begin": 1542,
											"end": 1550,
											"name": "DUP5"
										},
										{
											"begin": 1542,
											"end": 1550,
											"name": "AND"
										},
										{
											"begin": 1542,
											"end": 1550,
											"name": "SWAP4"
										},
										{
											"begin": 1535,
											"end": 1540,
											"name": "SWAP1"
										},
										{
											"begin": 1535,
											"end": 1540,
											"name": "SWAP2"
										},
										{
											"begin": 1535,
											"end": 1540,
											"name": "AND"
										},
										{
											"begin": 1535,
											"end": 1540,
											"name": "SWAP2"
										},
										{
											"begin": 1523,
											"end": 1551,
											"name": "PUSH",
											"value": "343765429AEA5A34B3FF6A3785A98A5ABB2597ACA87BFBB58632C173D585373A"
										},
										{
											"begin": 1523,
											"end": 1551,
											"name": "SWAP2"
										},
										{
											"begin": 1523,
											"end": 1551,
											"name": "LOG3"
										},
										{
											"begin": 1569,
											"end": 1577,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1569,
											"end": 1577,
											"name": "DUP1"
										},
										{
											"begin": 1569,
											"end": 1577,
											"name": "SLOAD"
										},
										{
											"begin": 1569,
											"end": 1577,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1561,
											"end": 1577,
											"name": "DUP1"
										},
										{
											"begin": 1561,
											"end": 1577,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT"
										},
										{
											"begin": 1561,
											"end": 1577,
											"name": "SWAP1"
										},
										{
											"begin": 1561,
											"end": 1577,
											"name": "DUP2"
										},
										{
											"begin": 1561,
											"end": 1577,
											"name": "AND"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 1569,
											"end": 1577,
											"name": "DUP5"
										},
										{
											"begin": 1569,
											"end": 1577,
											"name": "AND"
										},
										{
											"begin": 1561,
											"end": 1577,
											"name": "OR"
										},
										{
											"begin": 1561,
											"end": 1577,
											"name": "SWAP1"
										},
										{
											"begin": 1561,
											"end": 1577,
											"name": "SWAP2"
										},
										{
											"begin": 1561,
											"end": 1577,
											"name": "SSTORE"
										},
										{
											"begin": 1587,
											"end": 1608,
											"name": "AND"
										},
										{
											"begin": 1587,
											"end": 1608,
											"name": "SWAP1"
										},
										{
											"begin": 1587,
											"end": 1608,
											"name": "SSTORE"
										},
										{
											"begin": 1433,
											"end": 1615,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "tag",
											"value": "24"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "JUMPDEST"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "AND"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "DUP2"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 4454,
											"end": 4688,
											"name": "tag",
											"value": "27"
										},
										{
											"begin": 4454,
											"end": 4688,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 4565,
											"end": 4591,
											"name": "DUP3"
										},
										{
											"begin": 4565,
											"end": 4591,
											"name": "AND"
										},
										{
											"begin": 4532,
											"end": 4539,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4565,
											"end": 4591,
											"name": "SWAP1"
										},
										{
											"begin": 4565,
											"end": 4591,
											"name": "DUP2"
										},
										{
											"begin": 4565,
											"end": 4591,
											"name": "MSTORE"
										},
										{
											"begin": 4565,
											"end": 4583,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 4565,
											"end": 4591,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4565,
											"end": 4591,
											"name": "MSTORE"
										},
										{
											"begin": 4565,
											"end": 4591,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4565,
											"end": 4591,
											"name": "DUP2"
										},
										{
											"begin": 4565,
											"end": 4591,
											"name": "KECCAK256"
										},
										{
											"begin": 4565,
											"end": 4598,
											"name": "SLOAD"
										},
										{
											"begin": 4555,
											"end": 4598,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 4555,
											"end": 4598,
											"name": "DUP4"
										},
										{
											"begin": 4555,
											"end": 4598,
											"name": "AND"
										},
										{
											"begin": 4555,
											"end": 4598,
											"name": "LT"
										},
										{
											"begin": 4551,
											"end": 4629,
											"name": "PUSH [tag]",
											"value": "68"
										},
										{
											"begin": 4551,
											"end": 4629,
											"name": "JUMPI"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 4627,
											"end": 4628,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4612,
											"end": 4629,
											"name": "PUSH [tag]",
											"value": "67"
										},
										{
											"begin": 4612,
											"end": 4629,
											"name": "JUMP"
										},
										{
											"begin": 4551,
											"end": 4629,
											"name": "tag",
											"value": "68"
										},
										{
											"begin": 4551,
											"end": 4629,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 4647,
											"end": 4673,
											"name": "DUP4"
										},
										{
											"begin": 4647,
											"end": 4673,
											"name": "AND"
										},
										{
											"begin": 4647,
											"end": 4673,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4647,
											"end": 4673,
											"name": "SWAP1"
										},
										{
											"begin": 4647,
											"end": 4673,
											"name": "DUP2"
										},
										{
											"begin": 4647,
											"end": 4673,
											"name": "MSTORE"
										},
										{
											"begin": 4647,
											"end": 4665,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 4647,
											"end": 4673,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4647,
											"end": 4673,
											"name": "MSTORE"
										},
										{
											"begin": 4647,
											"end": 4673,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4647,
											"end": 4673,
											"name": "SWAP1"
										},
										{
											"begin": 4647,
											"end": 4673,
											"name": "KECCAK256"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "DUP1"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "SLOAD"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "DUP5"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "AND"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "SWAP1"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "DUP2"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "LT"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "PUSH [tag]",
											"value": "69"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "JUMPI"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "INVALID"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "tag",
											"value": "69"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "JUMPDEST"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "SWAP2"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "DUP3"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "MSTORE"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "SWAP1"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "SWAP2"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "KECCAK256"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "ADD"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "AND"
										},
										{
											"begin": 4647,
											"end": 4681,
											"name": "SWAP1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 4454,
											"end": 4688,
											"name": "tag",
											"value": "67"
										},
										{
											"begin": 4454,
											"end": 4688,
											"name": "JUMPDEST"
										},
										{
											"begin": 4454,
											"end": 4688,
											"name": "SWAP3"
										},
										{
											"begin": 4454,
											"end": 4688,
											"name": "SWAP2"
										},
										{
											"begin": 4454,
											"end": 4688,
											"name": "POP"
										},
										{
											"begin": 4454,
											"end": 4688,
											"name": "POP"
										},
										{
											"begin": 4454,
											"end": 4688,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 4914,
											"end": 5040,
											"name": "tag",
											"value": "30"
										},
										{
											"begin": 4914,
											"end": 5040,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 5003,
											"end": 5033,
											"name": "SWAP1"
										},
										{
											"begin": 5003,
											"end": 5033,
											"name": "DUP2"
										},
										{
											"begin": 5003,
											"end": 5033,
											"name": "AND"
										},
										{
											"begin": 4977,
											"end": 4984,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5003,
											"end": 5033,
											"name": "SWAP1"
										},
										{
											"begin": 5003,
											"end": 5033,
											"name": "DUP2"
										},
										{
											"begin": 5003,
											"end": 5033,
											"name": "MSTORE"
										},
										{
											"begin": 5003,
											"end": 5021,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 5003,
											"end": 5033,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5003,
											"end": 5033,
											"name": "MSTORE"
										},
										{
											"begin": 5003,
											"end": 5033,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5003,
											"end": 5033,
											"name": "SWAP1"
										},
										{
											"begin": 5003,
											"end": 5033,
											"name": "KECCAK256"
										},
										{
											"begin": 5003,
											"end": 5033,
											"name": "SLOAD"
										},
										{
											"begin": 5003,
											"end": 5033,
											"name": "AND"
										},
										{
											"begin": 5003,
											"end": 5033,
											"name": "SWAP1"
										},
										{
											"begin": 4914,
											"end": 5040,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "tag",
											"value": "33"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "JUMPDEST"
										},
										{
											"begin": 3826,
											"end": 3832,
											"name": "PUSH",
											"value": "5"
										},
										{
											"begin": 3826,
											"end": 3839,
											"name": "SLOAD"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "tag",
											"value": "72"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "JUMPDEST"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "SWAP1"
										},
										{
											"begin": 3757,
											"end": 3846,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 4065,
											"end": 4192,
											"name": "tag",
											"value": "36"
										},
										{
											"begin": 4065,
											"end": 4192,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 4152,
											"end": 4178,
											"name": "AND"
										},
										{
											"begin": 4126,
											"end": 4133,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4152,
											"end": 4178,
											"name": "SWAP1"
										},
										{
											"begin": 4152,
											"end": 4178,
											"name": "DUP2"
										},
										{
											"begin": 4152,
											"end": 4178,
											"name": "MSTORE"
										},
										{
											"begin": 4152,
											"end": 4170,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 4152,
											"end": 4178,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4152,
											"end": 4178,
											"name": "MSTORE"
										},
										{
											"begin": 4152,
											"end": 4178,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4152,
											"end": 4178,
											"name": "SWAP1"
										},
										{
											"begin": 4152,
											"end": 4178,
											"name": "KECCAK256"
										},
										{
											"begin": 4152,
											"end": 4185,
											"name": "SLOAD"
										},
										{
											"begin": 4152,
											"end": 4185,
											"name": "SWAP1"
										},
										{
											"begin": 4065,
											"end": 4192,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 5280,
											"end": 5894,
											"name": "tag",
											"value": "39"
										},
										{
											"begin": 5280,
											"end": 5894,
											"name": "JUMPDEST"
										},
										{
											"begin": 955,
											"end": 960,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 955,
											"end": 960,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 955,
											"end": 960,
											"name": "AND"
										},
										{
											"begin": 941,
											"end": 951,
											"name": "CALLER"
										},
										{
											"begin": 941,
											"end": 960,
											"name": "EQ"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "PUSH [tag]",
											"value": "75"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "JUMPI"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "DUP1"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "REVERT"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "tag",
											"value": "75"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "JUMPDEST"
										},
										{
											"begin": 5397,
											"end": 5403,
											"name": "DUP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 2089,
											"end": 2111,
											"name": "DUP2"
										},
										{
											"begin": 2089,
											"end": 2111,
											"name": "AND"
										},
										{
											"begin": 2089,
											"end": 2111,
											"name": "ISZERO"
										},
										{
											"begin": 2089,
											"end": 2111,
											"name": "ISZERO"
										},
										{
											"begin": 2081,
											"end": 2112,
											"name": "PUSH [tag]",
											"value": "77"
										},
										{
											"begin": 2081,
											"end": 2112,
											"name": "JUMPI"
										},
										{
											"begin": 2081,
											"end": 2112,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2081,
											"end": 2112,
											"name": "DUP1"
										},
										{
											"begin": 2081,
											"end": 2112,
											"name": "REVERT"
										},
										{
											"begin": 2081,
											"end": 2112,
											"name": "tag",
											"value": "77"
										},
										{
											"begin": 2081,
											"end": 2112,
											"name": "JUMPDEST"
										},
										{
											"begin": 5426,
											"end": 5436,
											"name": "DUP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 2089,
											"end": 2111,
											"name": "DUP2"
										},
										{
											"begin": 2089,
											"end": 2111,
											"name": "AND"
										},
										{
											"begin": 2089,
											"end": 2111,
											"name": "ISZERO"
										},
										{
											"begin": 2089,
											"end": 2111,
											"name": "ISZERO"
										},
										{
											"begin": 2081,
											"end": 2112,
											"name": "PUSH [tag]",
											"value": "79"
										},
										{
											"begin": 2081,
											"end": 2112,
											"name": "JUMPI"
										},
										{
											"begin": 2081,
											"end": 2112,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2081,
											"end": 2112,
											"name": "DUP1"
										},
										{
											"begin": 2081,
											"end": 2112,
											"name": "REVERT"
										},
										{
											"begin": 2081,
											"end": 2112,
											"name": "tag",
											"value": "79"
										},
										{
											"begin": 2081,
											"end": 2112,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 5460,
											"end": 5490,
											"name": "DUP4"
										},
										{
											"begin": 5460,
											"end": 5490,
											"name": "DUP2"
										},
										{
											"begin": 5460,
											"end": 5490,
											"name": "AND"
										},
										{
											"begin": 5502,
											"end": 5503,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5460,
											"end": 5490,
											"name": "SWAP1"
										},
										{
											"begin": 5460,
											"end": 5490,
											"name": "DUP2"
										},
										{
											"begin": 5460,
											"end": 5490,
											"name": "MSTORE"
										},
										{
											"begin": 5460,
											"end": 5478,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 5460,
											"end": 5490,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5460,
											"end": 5490,
											"name": "MSTORE"
										},
										{
											"begin": 5460,
											"end": 5490,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5460,
											"end": 5490,
											"name": "SWAP1"
										},
										{
											"begin": 5460,
											"end": 5490,
											"name": "KECCAK256"
										},
										{
											"begin": 5460,
											"end": 5490,
											"name": "SLOAD"
										},
										{
											"begin": 5460,
											"end": 5490,
											"name": "AND"
										},
										{
											"begin": 5460,
											"end": 5504,
											"name": "ISZERO"
										},
										{
											"begin": 5452,
											"end": 5505,
											"name": "PUSH [tag]",
											"value": "81"
										},
										{
											"begin": 5452,
											"end": 5505,
											"name": "JUMPI"
										},
										{
											"begin": 5452,
											"end": 5505,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5452,
											"end": 5505,
											"name": "DUP1"
										},
										{
											"begin": 5452,
											"end": 5505,
											"name": "REVERT"
										},
										{
											"begin": 5452,
											"end": 5505,
											"name": "tag",
											"value": "81"
										},
										{
											"begin": 5452,
											"end": 5505,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 5568,
											"end": 5592,
											"name": "DUP5"
										},
										{
											"begin": 5568,
											"end": 5592,
											"name": "AND"
										},
										{
											"begin": 5568,
											"end": 5592,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5568,
											"end": 5592,
											"name": "SWAP1"
										},
										{
											"begin": 5568,
											"end": 5592,
											"name": "DUP2"
										},
										{
											"begin": 5568,
											"end": 5592,
											"name": "MSTORE"
										},
										{
											"begin": 5568,
											"end": 5584,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 5568,
											"end": 5592,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5568,
											"end": 5592,
											"name": "MSTORE"
										},
										{
											"begin": 5568,
											"end": 5592,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5568,
											"end": 5592,
											"name": "SWAP1"
										},
										{
											"begin": 5568,
											"end": 5592,
											"name": "KECCAK256"
										},
										{
											"begin": 5568,
											"end": 5592,
											"name": "SLOAD"
										},
										{
											"begin": 5568,
											"end": 5592,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 5568,
											"end": 5592,
											"name": "AND"
										},
										{
											"begin": 5567,
											"end": 5592,
											"name": "ISZERO"
										},
										{
											"begin": 5563,
											"end": 5683,
											"name": "ISZERO"
										},
										{
											"begin": 5563,
											"end": 5683,
											"name": "PUSH [tag]",
											"value": "82"
										},
										{
											"begin": 5563,
											"end": 5683,
											"name": "JUMPI"
										},
										{
											"begin": 5608,
											"end": 5614,
											"name": "PUSH",
											"value": "5"
										},
										{
											"begin": 27,
											"end": 37,
											"name": "DUP1"
										},
										{
											"begin": 27,
											"end": 37,
											"name": "SLOAD"
										},
										{
											"begin": 39,
											"end": 40,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 23,
											"end": 41,
											"name": "DUP1"
										},
										{
											"begin": 23,
											"end": 41,
											"name": "DUP3"
										},
										{
											"begin": 23,
											"end": 41,
											"name": "ADD"
										},
										{
											"begin": 45,
											"end": 68,
											"name": "SWAP1"
										},
										{
											"begin": 45,
											"end": 68,
											"name": "SWAP3"
										},
										{
											"begin": 45,
											"end": 68,
											"name": "SSTORE"
										},
										{
											"begin": 5608,
											"end": 5627,
											"name": "PUSH",
											"value": "36B6384B5ECA791C62761152D0C79BB0604C104A5FB6F4EB0703F3154BB3DB0"
										},
										{
											"begin": 5608,
											"end": 5627,
											"name": "ADD"
										},
										{
											"begin": 5608,
											"end": 5627,
											"name": "DUP1"
										},
										{
											"begin": 5608,
											"end": 5627,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT"
										},
										{
											"begin": 5608,
											"end": 5627,
											"name": "AND"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 5608,
											"end": 5627,
											"name": "DUP8"
										},
										{
											"begin": 5608,
											"end": 5627,
											"name": "AND"
										},
										{
											"begin": 5608,
											"end": 5627,
											"name": "SWAP1"
										},
										{
											"begin": 5608,
											"end": 5627,
											"name": "DUP2"
										},
										{
											"begin": 5608,
											"end": 5627,
											"name": "OR"
										},
										{
											"begin": 5608,
											"end": 5627,
											"name": "SWAP1"
										},
										{
											"begin": 5608,
											"end": 5627,
											"name": "SWAP2"
										},
										{
											"begin": 5608,
											"end": 5627,
											"name": "SSTORE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5641,
											"end": 5665,
											"name": "SWAP1"
										},
										{
											"begin": 5641,
											"end": 5665,
											"name": "DUP2"
										},
										{
											"begin": 5641,
											"end": 5665,
											"name": "MSTORE"
										},
										{
											"begin": 5641,
											"end": 5657,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 5608,
											"end": 5627,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5641,
											"end": 5665,
											"name": "MSTORE"
										},
										{
											"begin": 5641,
											"end": 5665,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5641,
											"end": 5665,
											"name": "SWAP1"
										},
										{
											"begin": 5641,
											"end": 5665,
											"name": "KECCAK256"
										},
										{
											"begin": 5641,
											"end": 5672,
											"name": "DUP1"
										},
										{
											"begin": 5641,
											"end": 5672,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT"
										},
										{
											"begin": 5641,
											"end": 5672,
											"name": "AND"
										},
										{
											"begin": 5641,
											"end": 5672,
											"name": "SWAP1"
										},
										{
											"begin": 5641,
											"end": 5672,
											"name": "SWAP2"
										},
										{
											"begin": 5641,
											"end": 5672,
											"name": "OR"
										},
										{
											"begin": 5641,
											"end": 5672,
											"name": "SWAP1"
										},
										{
											"begin": 5641,
											"end": 5672,
											"name": "SSTORE"
										},
										{
											"begin": 5563,
											"end": 5683,
											"name": "tag",
											"value": "82"
										},
										{
											"begin": 5563,
											"end": 5683,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 5693,
											"end": 5719,
											"name": "DUP1"
										},
										{
											"begin": 5693,
											"end": 5719,
											"name": "DUP6"
										},
										{
											"begin": 5693,
											"end": 5719,
											"name": "AND"
										},
										{
											"begin": 5693,
											"end": 5719,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5693,
											"end": 5719,
											"name": "DUP2"
										},
										{
											"begin": 5693,
											"end": 5719,
											"name": "DUP2"
										},
										{
											"begin": 5693,
											"end": 5719,
											"name": "MSTORE"
										},
										{
											"begin": 5693,
											"end": 5711,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 5693,
											"end": 5719,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5693,
											"end": 5719,
											"name": "SWAP1"
										},
										{
											"begin": 5693,
											"end": 5719,
											"name": "DUP2"
										},
										{
											"begin": 5693,
											"end": 5719,
											"name": "MSTORE"
										},
										{
											"begin": 5693,
											"end": 5719,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5693,
											"end": 5719,
											"name": "DUP1"
										},
										{
											"begin": 5693,
											"end": 5719,
											"name": "DUP4"
										},
										{
											"begin": 5693,
											"end": 5719,
											"name": "KECCAK256"
										},
										{
											"begin": 27,
											"end": 37,
											"name": "DUP1"
										},
										{
											"begin": 27,
											"end": 37,
											"name": "SLOAD"
										},
										{
											"begin": 39,
											"end": 40,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 23,
											"end": 41,
											"name": "DUP2"
										},
										{
											"begin": 23,
											"end": 41,
											"name": "ADD"
										},
										{
											"begin": 45,
											"end": 68,
											"name": "DUP3"
										},
										{
											"begin": 45,
											"end": 68,
											"name": "SSTORE"
										},
										{
											"begin": 5693,
											"end": 5736,
											"name": "SWAP1"
										},
										{
											"begin": 5693,
											"end": 5736,
											"name": "DUP5"
										},
										{
											"begin": 5693,
											"end": 5736,
											"name": "MSTORE"
										},
										{
											"begin": 5693,
											"end": 5736,
											"name": "DUP3"
										},
										{
											"begin": 5693,
											"end": 5736,
											"name": "DUP5"
										},
										{
											"begin": 5693,
											"end": 5736,
											"name": "KECCAK256"
										},
										{
											"begin": 5693,
											"end": 5736,
											"name": "ADD"
										},
										{
											"begin": 5693,
											"end": 5736,
											"name": "DUP1"
										},
										{
											"begin": 5693,
											"end": 5736,
											"name": "SLOAD"
										},
										{
											"begin": 5693,
											"end": 5736,
											"name": "SWAP6"
										},
										{
											"begin": 5693,
											"end": 5736,
											"name": "DUP10"
										},
										{
											"begin": 5693,
											"end": 5736,
											"name": "AND"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT"
										},
										{
											"begin": 5693,
											"end": 5736,
											"name": "SWAP7"
										},
										{
											"begin": 5693,
											"end": 5736,
											"name": "DUP8"
										},
										{
											"begin": 5693,
											"end": 5736,
											"name": "AND"
										},
										{
											"begin": 5693,
											"end": 5736,
											"name": "DUP2"
										},
										{
											"begin": 5693,
											"end": 5736,
											"name": "OR"
										},
										{
											"begin": 5693,
											"end": 5736,
											"name": "SWAP1"
										},
										{
											"begin": 5693,
											"end": 5736,
											"name": "SWAP2"
										},
										{
											"begin": 5693,
											"end": 5736,
											"name": "SSTORE"
										},
										{
											"begin": 5746,
											"end": 5776,
											"name": "DUP1"
										},
										{
											"begin": 5746,
											"end": 5776,
											"name": "DUP5"
										},
										{
											"begin": 5746,
											"end": 5776,
											"name": "MSTORE"
										},
										{
											"begin": 5746,
											"end": 5764,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 5746,
											"end": 5776,
											"name": "DUP4"
										},
										{
											"begin": 5746,
											"end": 5776,
											"name": "MSTORE"
										},
										{
											"begin": 5746,
											"end": 5776,
											"name": "SWAP3"
										},
										{
											"begin": 5746,
											"end": 5776,
											"name": "DUP2"
										},
										{
											"begin": 5746,
											"end": 5776,
											"name": "SWAP1"
										},
										{
											"begin": 5746,
											"end": 5776,
											"name": "KECCAK256"
										},
										{
											"begin": 5746,
											"end": 5785,
											"name": "DUP1"
										},
										{
											"begin": 5746,
											"end": 5785,
											"name": "SLOAD"
										},
										{
											"begin": 5746,
											"end": 5785,
											"name": "SWAP1"
										},
										{
											"begin": 5746,
											"end": 5785,
											"name": "SWAP6"
										},
										{
											"begin": 5746,
											"end": 5785,
											"name": "AND"
										},
										{
											"begin": 5746,
											"end": 5785,
											"name": "DUP5"
										},
										{
											"begin": 5746,
											"end": 5785,
											"name": "OR"
										},
										{
											"begin": 5746,
											"end": 5785,
											"name": "SWAP1"
										},
										{
											"begin": 5746,
											"end": 5785,
											"name": "SWAP5"
										},
										{
											"begin": 5746,
											"end": 5785,
											"name": "SSTORE"
										},
										{
											"begin": 5850,
											"end": 5887,
											"name": "DUP4"
										},
										{
											"begin": 5850,
											"end": 5887,
											"name": "MLOAD"
										},
										{
											"begin": 5850,
											"end": 5887,
											"name": "SWAP2"
										},
										{
											"begin": 5850,
											"end": 5887,
											"name": "DUP3"
										},
										{
											"begin": 5850,
											"end": 5887,
											"name": "MSTORE"
										},
										{
											"begin": 5850,
											"end": 5887,
											"name": "SWAP3"
										},
										{
											"begin": 5850,
											"end": 5887,
											"name": "MLOAD"
										},
										{
											"begin": 5693,
											"end": 5719,
											"name": "SWAP2"
										},
										{
											"begin": 5693,
											"end": 5719,
											"name": "SWAP3"
										},
										{
											"begin": 5850,
											"end": 5887,
											"name": "PUSH",
											"value": "229AEC2EC4B21E700D6DAF13A894E7B38C18B844B021F2EEE263F04AF3EA6F00"
										},
										{
											"begin": 5850,
											"end": 5887,
											"name": "SWAP3"
										},
										{
											"begin": 5850,
											"end": 5887,
											"name": "SWAP2"
										},
										{
											"begin": 5850,
											"end": 5887,
											"name": "DUP3"
										},
										{
											"begin": 5850,
											"end": 5887,
											"name": "SWAP1"
										},
										{
											"begin": 5850,
											"end": 5887,
											"name": "SUB"
										},
										{
											"begin": 5850,
											"end": 5887,
											"name": "ADD"
										},
										{
											"begin": 5850,
											"end": 5887,
											"name": "SWAP1"
										},
										{
											"begin": 5850,
											"end": 5887,
											"name": "LOG2"
										},
										{
											"begin": 2122,
											"end": 2123,
											"name": "POP"
										},
										{
											"begin": 971,
											"end": 972,
											"name": "POP"
										},
										{
											"begin": 5280,
											"end": 5894,
											"name": "POP"
										},
										{
											"begin": 5280,
											"end": 5894,
											"name": "POP"
										},
										{
											"begin": 5280,
											"end": 5894,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "tag",
											"value": "42"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "JUMPDEST"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "AND"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "DUP2"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "tag",
											"value": "45"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "JUMPDEST"
										},
										{
											"begin": 955,
											"end": 960,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 955,
											"end": 960,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 955,
											"end": 960,
											"name": "AND"
										},
										{
											"begin": 941,
											"end": 951,
											"name": "CALLER"
										},
										{
											"begin": 941,
											"end": 960,
											"name": "EQ"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "PUSH [tag]",
											"value": "86"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "JUMPI"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "DUP1"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "REVERT"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "tag",
											"value": "86"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "JUMPDEST"
										},
										{
											"begin": 1304,
											"end": 1309,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1304,
											"end": 1309,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 1291,
											"end": 1309,
											"name": "DUP3"
										},
										{
											"begin": 1291,
											"end": 1309,
											"name": "DUP2"
										},
										{
											"begin": 1291,
											"end": 1309,
											"name": "AND"
										},
										{
											"begin": 1304,
											"end": 1309,
											"name": "SWAP2"
										},
										{
											"begin": 1304,
											"end": 1309,
											"name": "AND"
										},
										{
											"begin": 1291,
											"end": 1309,
											"name": "EQ"
										},
										{
											"begin": 1291,
											"end": 1309,
											"name": "ISZERO"
										},
										{
											"begin": 1283,
											"end": 1310,
											"name": "PUSH [tag]",
											"value": "88"
										},
										{
											"begin": 1283,
											"end": 1310,
											"name": "JUMPI"
										},
										{
											"begin": 1283,
											"end": 1310,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1283,
											"end": 1310,
											"name": "DUP1"
										},
										{
											"begin": 1283,
											"end": 1310,
											"name": "REVERT"
										},
										{
											"begin": 1283,
											"end": 1310,
											"name": "tag",
											"value": "88"
										},
										{
											"begin": 1283,
											"end": 1310,
											"name": "JUMPDEST"
										},
										{
											"begin": 1320,
											"end": 1328,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "DUP1"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "AND"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "SWAP3"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "SWAP1"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "SWAP3"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "AND"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "SWAP2"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "SWAP1"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "SWAP2"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "OR"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "SWAP1"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "SSTORE"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "tag",
											"value": "62"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMPDEST"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP2"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "SLOAD"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP2"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP4"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "SSTORE"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP2"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP2"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "GT"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "ISZERO"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH [tag]",
											"value": "90"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMPI"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP4"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP2"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "MSTORE"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "SWAP1"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "KECCAK256"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH [tag]",
											"value": "90"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "SWAP2"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP2"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "ADD"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "SWAP1"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP4"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "ADD"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH [tag]",
											"value": "91"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "tag",
											"value": "90"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMPDEST"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "POP"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "POP"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "POP"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "tag",
											"value": "91"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMPDEST"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH [tag]",
											"value": "72"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "SWAP2"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "SWAP1"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "tag",
											"value": "93"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMPDEST"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP1"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP3"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "GT"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "ISZERO"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH [tag]",
											"value": "94"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMPI"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "DUP2"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "SSTORE"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "ADD"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "PUSH [tag]",
											"value": "93"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMP"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "tag",
											"value": "94"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMPDEST"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "POP"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "SWAP1"
										},
										{
											"begin": 2852,
											"end": 7044,
											"name": "JUMP"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"acceptOwnership()": "79ba5097",
							"converterAddress(address,uint32)": "90ab3106",
							"converterCount(address)": "cd9d4d66",
							"newOwner()": "d4ee1d90",
							"owner()": "8da5cb5b",
							"registerConverter(address,address)": "d26a8d2e",
							"tokenAddress(address)": "9884e801",
							"tokenCount()": "9f181b5e",
							"tokens(uint256)": "4f64b2be",
							"transferOwnership(address)": "f2fde38b",
							"unregisterConverter(address,uint32)": "38cb066f"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint32\"}],\"name\":\"unregisterConverter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint32\"}],\"name\":\"converterAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_converter\",\"type\":\"address\"}],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"converterCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_converter\",\"type\":\"address\"}],\"name\":\"registerConverter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"ConverterAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"ConverterRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"acceptOwnership()\":{\"details\":\"used by a new owner to accept an ownership transfer\"},\"converterAddress(address,uint32)\":{\"details\":\"returns the converter address associated with the given token or zero address if no such converter exists\",\"params\":{\"_index\":\"converter index\",\"_token\":\"token address\"},\"return\":\"converter address\"},\"converterCount(address)\":{\"details\":\"returns the number of converters associated with the given token or 0 if the token isn't registered\",\"params\":{\"_token\":\"token address\"},\"return\":\"number of converters\"},\"registerConverter(address,address)\":{\"details\":\"adds a new converter address for a given token to the registry throws if the converter is already registered\",\"params\":{\"_converter\":\"converter address\",\"_token\":\"token address\"}},\"tokenAddress(address)\":{\"details\":\"returns the token address associated with the given converter or zero address if no such converter exists\",\"params\":{\"_converter\":\"converter address\"},\"return\":\"token address\"},\"tokenCount()\":{\"details\":\"returns the number of tokens in the registry\",\"return\":\"number of tokens\"},\"transferOwnership(address)\":{\"details\":\"allows transferring the contract ownership the new owner still needs to accept the transfer can only be called by the contract owner\",\"params\":{\"_newOwner\":\"new contract owner\"}},\"unregisterConverter(address,uint32)\":{\"details\":\"removes an existing converter from the registry note that the function doesn't scale and might be needed to be called multiple times when removing an older converter from a large converter list\",\"params\":{\"_index\":\"converter index\",\"_token\":\"token address\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/block/block.sol\":\"BancorConverterRegistry\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/block/block.sol\":{\"keccak256\":\"0x2cee8ba2871093ea8de0295ff44f1e9f7a6978e4c2d7a29382690638fdccc34c\",\"urls\":[\"bzzr://42d53a521dfcd2f384c9853e94961796988b1393ce8174e45f1fe4b8bfb6f2d9\"]}},\"version\":1}",
					"userdoc": {
						"methods": {}
					}
				},
				"IOwned": {
					"abi": [
						{
							"constant": false,
							"inputs": [],
							"name": "acceptOwnership",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"name": "",
									"type": "address"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"name": "_newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"acceptOwnership()": "79ba5097",
							"owner()": "8da5cb5b",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "",
					"userdoc": {
						"methods": {}
					}
				},
				"Owned": {
					"abi": [
						{
							"constant": false,
							"inputs": [],
							"name": "acceptOwnership",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"name": "",
									"type": "address"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "newOwner",
							"outputs": [
								{
									"name": "",
									"type": "address"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"name": "_newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"name": "_prevOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"name": "_newOwner",
									"type": "address"
								}
							],
							"name": "OwnerUpdate",
							"type": "event"
						}
					],
					"devdoc": {
						"methods": {
							"acceptOwnership()": {
								"details": "used by a new owner to accept an ownership transfer"
							},
							"transferOwnership(address)": {
								"details": "allows transferring the contract ownership the new owner still needs to accept the transfer can only be called by the contract owner",
								"params": {
									"_newOwner": "new contract owner"
								}
							}
						}
					},
					"evm": {
						"assembly": "    /* \"contracts/block/block.sol\":594:1617  contract Owned is IOwned {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/block/block.sol\":800:856  constructor() public {... */\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x0\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n  pop\n    /* \"contracts/block/block.sol\":831:836  owner */\n  0x0\n    /* \"contracts/block/block.sol\":831:849  owner = msg.sender */\n  dup1\n  sload\n  not(sub(exp(0x2, 0xa0), 0x1))\n  and\n    /* \"contracts/block/block.sol\":839:849  msg.sender */\n  caller\n    /* \"contracts/block/block.sol\":831:849  owner = msg.sender */\n  or\n  swap1\n  sstore\n    /* \"contracts/block/block.sol\":594:1617  contract Owned is IOwned {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x0\n  codecopy\n  0x0\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/block/block.sol\":594:1617  contract Owned is IOwned {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x4))\n      and(div(calldataload(0x0), 0x100000000000000000000000000000000000000000000000000000000), 0xffffffff)\n      0x79ba5097\n      dup2\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_3\n      jumpi\n      dup1\n      0xd4ee1d90\n      eq\n      tag_4\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_5\n      jumpi\n    tag_1:\n      0x0\n      dup1\n      revert\n        /* \"contracts/block/block.sol\":1433:1615  function acceptOwnership() public {... */\n    tag_2:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_6\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_6:\n        /* \"contracts/block/block.sol\":1433:1615  function acceptOwnership() public {... */\n      pop\n      tag_7\n      jump(tag_8)\n    tag_7:\n      stop\n        /* \"contracts/block/block.sol\":625:645  address public owner */\n    tag_3:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_9\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_9:\n        /* \"contracts/block/block.sol\":625:645  address public owner */\n      pop\n      tag_10\n      jump(tag_11)\n    tag_10:\n      0x40\n      dup1\n      mload\n      sub(exp(0x2, 0xa0), 0x1)\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/block/block.sol\":651:674  address public newOwner */\n    tag_4:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_12\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_12:\n        /* \"contracts/block/block.sol\":651:674  address public newOwner */\n      pop\n      tag_10\n      jump(tag_14)\n        /* \"contracts/block/block.sol\":1210:1347  function transferOwnership(address _newOwner) public ownerOnly {... */\n    tag_5:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_15\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_15:\n      pop\n        /* \"contracts/block/block.sol\":1210:1347  function transferOwnership(address _newOwner) public ownerOnly {... */\n      tag_7\n      and(calldataload(0x4), sub(exp(0x2, 0xa0), 0x1))\n      jump(tag_17)\n        /* \"contracts/block/block.sol\":1433:1615  function acceptOwnership() public {... */\n    tag_8:\n        /* \"contracts/block/block.sol\":1499:1507  newOwner */\n      and(sub(exp(0x2, 0xa0), 0x1), sload(0x1))\n        /* \"contracts/block/block.sol\":1485:1495  msg.sender */\n      caller\n        /* \"contracts/block/block.sol\":1485:1507  msg.sender == newOwner */\n      eq\n        /* \"contracts/block/block.sol\":1477:1508  require(msg.sender == newOwner) */\n      tag_19\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_19:\n        /* \"contracts/block/block.sol\":1542:1550  newOwner */\n      sload(0x1)\n      0x0\n        /* \"contracts/block/block.sol\":1535:1540  owner */\n      dup1\n      sload\n        /* \"contracts/block/block.sol\":1523:1551  OwnerUpdate(owner, newOwner) */\n      mload(0x40)\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":1542:1550  newOwner */\n      swap4\n      dup5\n      and\n      swap4\n        /* \"contracts/block/block.sol\":1535:1540  owner */\n      swap1\n      swap2\n      and\n      swap2\n        /* \"contracts/block/block.sol\":1523:1551  OwnerUpdate(owner, newOwner) */\n      0x343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a\n      swap2\n      log3\n        /* \"contracts/block/block.sol\":1569:1577  newOwner */\n      0x1\n      dup1\n      sload\n      0x0\n        /* \"contracts/block/block.sol\":1561:1577  owner = newOwner */\n      dup1\n      sload\n      not(0xffffffffffffffffffffffffffffffffffffffff)\n      swap1\n      dup2\n      and\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":1569:1577  newOwner */\n      dup5\n      and\n        /* \"contracts/block/block.sol\":1561:1577  owner = newOwner */\n      or\n      swap1\n      swap2\n      sstore\n        /* \"contracts/block/block.sol\":1587:1608  newOwner = address(0) */\n      and\n      swap1\n      sstore\n        /* \"contracts/block/block.sol\":1433:1615  function acceptOwnership() public {... */\n      jump\t// out\n        /* \"contracts/block/block.sol\":625:645  address public owner */\n    tag_11:\n      and(sub(exp(0x2, 0xa0), 0x1), sload(0x0))\n      dup2\n      jump\t// out\n        /* \"contracts/block/block.sol\":651:674  address public newOwner */\n    tag_14:\n      and(sub(exp(0x2, 0xa0), 0x1), sload(0x1))\n      dup2\n      jump\t// out\n        /* \"contracts/block/block.sol\":1210:1347  function transferOwnership(address _newOwner) public ownerOnly {... */\n    tag_17:\n        /* \"contracts/block/block.sol\":955:960  owner */\n      and(sub(exp(0x2, 0xa0), 0x1), sload(0x0))\n        /* \"contracts/block/block.sol\":941:951  msg.sender */\n      caller\n        /* \"contracts/block/block.sol\":941:960  msg.sender == owner */\n      eq\n        /* \"contracts/block/block.sol\":933:961  require(msg.sender == owner) */\n      tag_21\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_21:\n        /* \"contracts/block/block.sol\":1304:1309  owner */\n      sload(0x0)\n      sub(exp(0x2, 0xa0), 0x1)\n        /* \"contracts/block/block.sol\":1291:1309  _newOwner != owner */\n      dup3\n      dup2\n      and\n        /* \"contracts/block/block.sol\":1304:1309  owner */\n      swap2\n      and\n        /* \"contracts/block/block.sol\":1291:1309  _newOwner != owner */\n      eq\n      iszero\n        /* \"contracts/block/block.sol\":1283:1310  require(_newOwner != owner) */\n      tag_23\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_23:\n        /* \"contracts/block/block.sol\":1320:1328  newOwner */\n      0x1\n        /* \"contracts/block/block.sol\":1320:1340  newOwner = _newOwner */\n      dup1\n      sload\n      not(0xffffffffffffffffffffffffffffffffffffffff)\n      and\n      sub(exp(0x2, 0xa0), 0x1)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/block/block.sol\":1210:1347  function transferOwnership(address _newOwner) public ownerOnly {... */\n      jump\t// out\n\n    auxdata: 0xa165627a7a72305820fc05f7a674d0322a3c2c1e4a2cb3795e7b5a642269918dcd9c9ae8a2284057630029\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5060008054600160a060020a03191633179055610217806100326000396000f3006080604052600436106100615763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166379ba509781146100665780638da5cb5b1461007d578063d4ee1d90146100ae578063f2fde38b146100c3575b600080fd5b34801561007257600080fd5b5061007b6100e4565b005b34801561008957600080fd5b5061009261016c565b60408051600160a060020a039092168252519081900360200190f35b3480156100ba57600080fd5b5061009261017b565b3480156100cf57600080fd5b5061007b600160a060020a036004351661018a565b600154600160a060020a031633146100fb57600080fd5b60015460008054604051600160a060020a0393841693909116917f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a91a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031681565b600154600160a060020a031681565b600054600160a060020a031633146101a157600080fd5b600054600160a060020a03828116911614156101bc57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820fc05f7a674d0322a3c2c1e4a2cb3795e7b5a642269918dcd9c9ae8a2284057630029",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x217 DUP1 PUSH2 0x32 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x61 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x79BA5097 DUP2 EQ PUSH2 0x66 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x7D JUMPI DUP1 PUSH4 0xD4EE1D90 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xC3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7B PUSH2 0xE4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x92 PUSH2 0x16C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x92 PUSH2 0x17B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7B PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x18A JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0xFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP4 DUP5 AND SWAP4 SWAP1 SWAP2 AND SWAP2 PUSH32 0x343765429AEA5A34B3FF6A3785A98A5ABB2597ACA87BFBB58632C173D585373A SWAP2 LOG3 PUSH1 0x1 DUP1 SLOAD PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND OR SWAP1 SWAP2 SSTORE AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x1A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x1BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xfc SDIV 0xf7 0xa6 PUSH21 0xD0322A3C2C1E4A2CB3795E7B5A642269918DCD9C9A 0xe8 LOG2 0x28 BLOCKHASH JUMPI PUSH4 0x290000 ",
							"sourceMap": "594:1023:0:-;;;800:56;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;831:5:0;:18;;-1:-1:-1;;;;;;831:18:0;839:10;831:18;;;594:1023;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "6080604052600436106100615763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166379ba509781146100665780638da5cb5b1461007d578063d4ee1d90146100ae578063f2fde38b146100c3575b600080fd5b34801561007257600080fd5b5061007b6100e4565b005b34801561008957600080fd5b5061009261016c565b60408051600160a060020a039092168252519081900360200190f35b3480156100ba57600080fd5b5061009261017b565b3480156100cf57600080fd5b5061007b600160a060020a036004351661018a565b600154600160a060020a031633146100fb57600080fd5b60015460008054604051600160a060020a0393841693909116917f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a91a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031681565b600154600160a060020a031681565b600054600160a060020a031633146101a157600080fd5b600054600160a060020a03828116911614156101bc57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820fc05f7a674d0322a3c2c1e4a2cb3795e7b5a642269918dcd9c9ae8a2284057630029",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x61 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x79BA5097 DUP2 EQ PUSH2 0x66 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x7D JUMPI DUP1 PUSH4 0xD4EE1D90 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xC3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7B PUSH2 0xE4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x92 PUSH2 0x16C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x92 PUSH2 0x17B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7B PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x18A JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0xFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP4 DUP5 AND SWAP4 SWAP1 SWAP2 AND SWAP2 PUSH32 0x343765429AEA5A34B3FF6A3785A98A5ABB2597ACA87BFBB58632C173D585373A SWAP2 LOG3 PUSH1 0x1 DUP1 SLOAD PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND OR SWAP1 SWAP2 SSTORE AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x1A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x1BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xfc SDIV 0xf7 0xa6 PUSH21 0xD0322A3C2C1E4A2CB3795E7B5A642269918DCD9C9A 0xe8 LOG2 0x28 BLOCKHASH JUMPI PUSH4 0x290000 ",
							"sourceMap": "594:1023:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1433:182;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1433:182:0;;;;;;625:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;625:20:0;;;;;;;;-1:-1:-1;;;;;625:20:0;;;;;;;;;;;;;;651:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;651:23:0;;;;1210:137;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1210:137:0;-1:-1:-1;;;;;1210:137:0;;;;;1433:182;1499:8;;-1:-1:-1;;;;;1499:8:0;1485:10;:22;1477:31;;;;;;1542:8;;;1535:5;;1523:28;;-1:-1:-1;;;;;1542:8:0;;;;1535:5;;;;1523:28;;;1569:8;;;;1561:16;;-1:-1:-1;;1561:16:0;;;-1:-1:-1;;;;;1569:8:0;;1561:16;;;;1587:21;;;1433:182::o;625:20::-;;;-1:-1:-1;;;;;625:20:0;;:::o;651:23::-;;;-1:-1:-1;;;;;651:23:0;;:::o;1210:137::-;955:5;;-1:-1:-1;;;;;955:5:0;941:10;:19;933:28;;;;;;1304:5;;-1:-1:-1;;;;;1291:18:0;;;1304:5;;1291:18;;1283:27;;;;;;1320:8;:20;;-1:-1:-1;;1320:20:0;-1:-1:-1;;;;;1320:20:0;;;;;;;;;;1210:137::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "107000",
								"executionCost": "20445",
								"totalCost": "127445"
							},
							"external": {
								"acceptOwnership()": "42964",
								"newOwner()": "581",
								"owner()": "559",
								"transferOwnership(address)": "21198"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 594,
									"end": 1617,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 594,
									"end": 1617,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 594,
									"end": 1617,
									"name": "MSTORE"
								},
								{
									"begin": 800,
									"end": 856,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP"
								},
								{
									"begin": 831,
									"end": 836,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 831,
									"end": 849,
									"name": "DUP1"
								},
								{
									"begin": 831,
									"end": 849,
									"name": "SLOAD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "EXP"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT"
								},
								{
									"begin": 831,
									"end": 849,
									"name": "AND"
								},
								{
									"begin": 839,
									"end": 849,
									"name": "CALLER"
								},
								{
									"begin": 831,
									"end": 849,
									"name": "OR"
								},
								{
									"begin": 831,
									"end": 849,
									"name": "SWAP1"
								},
								{
									"begin": 831,
									"end": 849,
									"name": "SSTORE"
								},
								{
									"begin": 594,
									"end": 1617,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 594,
									"end": 1617,
									"name": "DUP1"
								},
								{
									"begin": 594,
									"end": 1617,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 594,
									"end": 1617,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 594,
									"end": 1617,
									"name": "CODECOPY"
								},
								{
									"begin": 594,
									"end": 1617,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 594,
									"end": 1617,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a165627a7a72305820fc05f7a674d0322a3c2c1e4a2cb3795e7b5a642269918dcd9c9ae8a2284057630029",
									".code": [
										{
											"begin": 594,
											"end": 1617,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "MSTORE"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "LT"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "PUSH [tag]",
											"value": "1"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "JUMPI"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "PUSH",
											"value": "100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "DIV"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "AND"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "PUSH",
											"value": "79BA5097"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "DUP2"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "EQ"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "JUMPI"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "DUP1"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "PUSH",
											"value": "8DA5CB5B"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "EQ"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "PUSH [tag]",
											"value": "3"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "JUMPI"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "DUP1"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "PUSH",
											"value": "D4EE1D90"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "EQ"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "PUSH [tag]",
											"value": "4"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "JUMPI"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "DUP1"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "PUSH",
											"value": "F2FDE38B"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "EQ"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "PUSH [tag]",
											"value": "5"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "JUMPI"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "tag",
											"value": "1"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "JUMPDEST"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "DUP1"
										},
										{
											"begin": 594,
											"end": 1617,
											"name": "REVERT"
										},
										{
											"begin": 1433,
											"end": 1615,
											"name": "tag",
											"value": "2"
										},
										{
											"begin": 1433,
											"end": 1615,
											"name": "JUMPDEST"
										},
										{
											"begin": 1433,
											"end": 1615,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "6"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "6"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 1433,
											"end": 1615,
											"name": "POP"
										},
										{
											"begin": 1433,
											"end": 1615,
											"name": "PUSH [tag]",
											"value": "7"
										},
										{
											"begin": 1433,
											"end": 1615,
											"name": "PUSH [tag]",
											"value": "8"
										},
										{
											"begin": 1433,
											"end": 1615,
											"name": "JUMP"
										},
										{
											"begin": 1433,
											"end": 1615,
											"name": "tag",
											"value": "7"
										},
										{
											"begin": 1433,
											"end": 1615,
											"name": "JUMPDEST"
										},
										{
											"begin": 1433,
											"end": 1615,
											"name": "STOP"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "tag",
											"value": "3"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "JUMPDEST"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "9"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "9"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "POP"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "PUSH [tag]",
											"value": "10"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "PUSH [tag]",
											"value": "11"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "JUMP"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "tag",
											"value": "10"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "JUMPDEST"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "DUP1"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "SWAP1"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "SWAP3"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "AND"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "DUP3"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "MSTORE"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "MLOAD"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "SWAP1"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "DUP2"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "SWAP1"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "SUB"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "ADD"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "SWAP1"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "RETURN"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "tag",
											"value": "4"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "JUMPDEST"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "12"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "12"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "POP"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "PUSH [tag]",
											"value": "10"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "PUSH [tag]",
											"value": "14"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "JUMP"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "tag",
											"value": "5"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "JUMPDEST"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "15"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "15"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "PUSH [tag]",
											"value": "7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "AND"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "JUMP"
										},
										{
											"begin": 1433,
											"end": 1615,
											"name": "tag",
											"value": "8"
										},
										{
											"begin": 1433,
											"end": 1615,
											"name": "JUMPDEST"
										},
										{
											"begin": 1499,
											"end": 1507,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1499,
											"end": 1507,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 1499,
											"end": 1507,
											"name": "AND"
										},
										{
											"begin": 1485,
											"end": 1495,
											"name": "CALLER"
										},
										{
											"begin": 1485,
											"end": 1507,
											"name": "EQ"
										},
										{
											"begin": 1477,
											"end": 1508,
											"name": "PUSH [tag]",
											"value": "19"
										},
										{
											"begin": 1477,
											"end": 1508,
											"name": "JUMPI"
										},
										{
											"begin": 1477,
											"end": 1508,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1477,
											"end": 1508,
											"name": "DUP1"
										},
										{
											"begin": 1477,
											"end": 1508,
											"name": "REVERT"
										},
										{
											"begin": 1477,
											"end": 1508,
											"name": "tag",
											"value": "19"
										},
										{
											"begin": 1477,
											"end": 1508,
											"name": "JUMPDEST"
										},
										{
											"begin": 1542,
											"end": 1550,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1542,
											"end": 1550,
											"name": "SLOAD"
										},
										{
											"begin": 1542,
											"end": 1550,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1535,
											"end": 1540,
											"name": "DUP1"
										},
										{
											"begin": 1535,
											"end": 1540,
											"name": "SLOAD"
										},
										{
											"begin": 1523,
											"end": 1551,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1523,
											"end": 1551,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 1542,
											"end": 1550,
											"name": "SWAP4"
										},
										{
											"begin": 1542,
											"end": 1550,
											"name": "DUP5"
										},
										{
											"begin": 1542,
											"end": 1550,
											"name": "AND"
										},
										{
											"begin": 1542,
											"end": 1550,
											"name": "SWAP4"
										},
										{
											"begin": 1535,
											"end": 1540,
											"name": "SWAP1"
										},
										{
											"begin": 1535,
											"end": 1540,
											"name": "SWAP2"
										},
										{
											"begin": 1535,
											"end": 1540,
											"name": "AND"
										},
										{
											"begin": 1535,
											"end": 1540,
											"name": "SWAP2"
										},
										{
											"begin": 1523,
											"end": 1551,
											"name": "PUSH",
											"value": "343765429AEA5A34B3FF6A3785A98A5ABB2597ACA87BFBB58632C173D585373A"
										},
										{
											"begin": 1523,
											"end": 1551,
											"name": "SWAP2"
										},
										{
											"begin": 1523,
											"end": 1551,
											"name": "LOG3"
										},
										{
											"begin": 1569,
											"end": 1577,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1569,
											"end": 1577,
											"name": "DUP1"
										},
										{
											"begin": 1569,
											"end": 1577,
											"name": "SLOAD"
										},
										{
											"begin": 1569,
											"end": 1577,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1561,
											"end": 1577,
											"name": "DUP1"
										},
										{
											"begin": 1561,
											"end": 1577,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT"
										},
										{
											"begin": 1561,
											"end": 1577,
											"name": "SWAP1"
										},
										{
											"begin": 1561,
											"end": 1577,
											"name": "DUP2"
										},
										{
											"begin": 1561,
											"end": 1577,
											"name": "AND"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 1569,
											"end": 1577,
											"name": "DUP5"
										},
										{
											"begin": 1569,
											"end": 1577,
											"name": "AND"
										},
										{
											"begin": 1561,
											"end": 1577,
											"name": "OR"
										},
										{
											"begin": 1561,
											"end": 1577,
											"name": "SWAP1"
										},
										{
											"begin": 1561,
											"end": 1577,
											"name": "SWAP2"
										},
										{
											"begin": 1561,
											"end": 1577,
											"name": "SSTORE"
										},
										{
											"begin": 1587,
											"end": 1608,
											"name": "AND"
										},
										{
											"begin": 1587,
											"end": 1608,
											"name": "SWAP1"
										},
										{
											"begin": 1587,
											"end": 1608,
											"name": "SSTORE"
										},
										{
											"begin": 1433,
											"end": 1615,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "tag",
											"value": "11"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "JUMPDEST"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "AND"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "DUP2"
										},
										{
											"begin": 625,
											"end": 645,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "tag",
											"value": "14"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "JUMPDEST"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "AND"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "DUP2"
										},
										{
											"begin": 651,
											"end": 674,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "tag",
											"value": "17"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "JUMPDEST"
										},
										{
											"begin": 955,
											"end": 960,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 955,
											"end": 960,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 955,
											"end": 960,
											"name": "AND"
										},
										{
											"begin": 941,
											"end": 951,
											"name": "CALLER"
										},
										{
											"begin": 941,
											"end": 960,
											"name": "EQ"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "PUSH [tag]",
											"value": "21"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "JUMPI"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "DUP1"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "REVERT"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "tag",
											"value": "21"
										},
										{
											"begin": 933,
											"end": 961,
											"name": "JUMPDEST"
										},
										{
											"begin": 1304,
											"end": 1309,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1304,
											"end": 1309,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 1291,
											"end": 1309,
											"name": "DUP3"
										},
										{
											"begin": 1291,
											"end": 1309,
											"name": "DUP2"
										},
										{
											"begin": 1291,
											"end": 1309,
											"name": "AND"
										},
										{
											"begin": 1304,
											"end": 1309,
											"name": "SWAP2"
										},
										{
											"begin": 1304,
											"end": 1309,
											"name": "AND"
										},
										{
											"begin": 1291,
											"end": 1309,
											"name": "EQ"
										},
										{
											"begin": 1291,
											"end": 1309,
											"name": "ISZERO"
										},
										{
											"begin": 1283,
											"end": 1310,
											"name": "PUSH [tag]",
											"value": "23"
										},
										{
											"begin": 1283,
											"end": 1310,
											"name": "JUMPI"
										},
										{
											"begin": 1283,
											"end": 1310,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1283,
											"end": 1310,
											"name": "DUP1"
										},
										{
											"begin": 1283,
											"end": 1310,
											"name": "REVERT"
										},
										{
											"begin": 1283,
											"end": 1310,
											"name": "tag",
											"value": "23"
										},
										{
											"begin": 1283,
											"end": 1310,
											"name": "JUMPDEST"
										},
										{
											"begin": 1320,
											"end": 1328,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "DUP1"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "AND"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "SWAP3"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "SWAP1"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "SWAP3"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "AND"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "SWAP2"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "SWAP1"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "SWAP2"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "OR"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "SWAP1"
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "SSTORE"
										},
										{
											"begin": 1210,
											"end": 1347,
											"name": "JUMP",
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"acceptOwnership()": "79ba5097",
							"newOwner()": "d4ee1d90",
							"owner()": "8da5cb5b",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"acceptOwnership()\":{\"details\":\"used by a new owner to accept an ownership transfer\"},\"transferOwnership(address)\":{\"details\":\"allows transferring the contract ownership the new owner still needs to accept the transfer can only be called by the contract owner\",\"params\":{\"_newOwner\":\"new contract owner\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/block/block.sol\":\"Owned\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/block/block.sol\":{\"keccak256\":\"0x2cee8ba2871093ea8de0295ff44f1e9f7a6978e4c2d7a29382690638fdccc34c\",\"urls\":[\"bzzr://42d53a521dfcd2f384c9853e94961796988b1393ce8174e45f1fe4b8bfb6f2d9\"]}},\"version\":1}",
					"userdoc": {
						"methods": {}
					}
				},
				"Utils": {
					"abi": [
						{
							"inputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "constructor"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"contracts/block/block.sol\":1722:2309  contract Utils {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/block/block.sol\":1778:1806  constructor() public {... */\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x0\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/block/block.sol\":1778:1806  constructor() public {... */\n  pop\n    /* \"contracts/block/block.sol\":1722:2309  contract Utils {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x0\n  codecopy\n  0x0\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/block/block.sol\":1722:2309  contract Utils {... */\n      mstore(0x40, 0x80)\n      0x0\n      dup1\n      revert\n\n    auxdata: 0xa165627a7a72305820abcf82bcaa6d3eb9f1a56f4319e276020d55e46de5661556a73525e40509b39b0029\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b50603580601d6000396000f3006080604052600080fd00a165627a7a72305820abcf82bcaa6d3eb9f1a56f4319e276020d55e46de5661556a73525e40509b39b0029",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x35 DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xab 0xcf DUP3 0xbc 0xaa PUSH14 0x3EB9F1A56F4319E276020D55E46D 0xe5 PUSH7 0x1556A73525E405 MULMOD 0xb3 SWAP12 STOP 0x29 ",
							"sourceMap": "1722:587:0:-;;;1778:28;8:9:-1;5:2;;;30:1;27;20:12;5:2;1778:28:0;1722:587;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "6080604052600080fd00a165627a7a72305820abcf82bcaa6d3eb9f1a56f4319e276020d55e46de5661556a73525e40509b39b0029",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xab 0xcf DUP3 0xbc 0xaa PUSH14 0x3EB9F1A56F4319E276020D55E46D 0xe5 PUSH7 0x1556A73525E405 MULMOD 0xb3 SWAP12 STOP 0x29 ",
							"sourceMap": "1722:587:0:-;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "10600",
								"executionCost": "66",
								"totalCost": "10666"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1722,
									"end": 2309,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 1722,
									"end": 2309,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 1722,
									"end": 2309,
									"name": "MSTORE"
								},
								{
									"begin": 1778,
									"end": 1806,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": 1778,
									"end": 1806,
									"name": "POP"
								},
								{
									"begin": 1722,
									"end": 2309,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1722,
									"end": 2309,
									"name": "DUP1"
								},
								{
									"begin": 1722,
									"end": 2309,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1722,
									"end": 2309,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 1722,
									"end": 2309,
									"name": "CODECOPY"
								},
								{
									"begin": 1722,
									"end": 2309,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 1722,
									"end": 2309,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a165627a7a72305820abcf82bcaa6d3eb9f1a56f4319e276020d55e46de5661556a73525e40509b39b0029",
									".code": [
										{
											"begin": 1722,
											"end": 2309,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 1722,
											"end": 2309,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1722,
											"end": 2309,
											"name": "MSTORE"
										},
										{
											"begin": 1722,
											"end": 2309,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1722,
											"end": 2309,
											"name": "DUP1"
										},
										{
											"begin": 1722,
											"end": 2309,
											"name": "REVERT"
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/block/block.sol\":\"Utils\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/block/block.sol\":{\"keccak256\":\"0x2cee8ba2871093ea8de0295ff44f1e9f7a6978e4c2d7a29382690638fdccc34c\",\"urls\":[\"bzzr://42d53a521dfcd2f384c9853e94961796988b1393ce8174e45f1fe4b8bfb6f2d9\"]}},\"version\":1}",
					"userdoc": {
						"methods": {}
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"formattedMessage": "contracts/block/block.sol:14:5: Warning: Function state mutability can be restricted to pure\n    function owner() public view returns (address) {}\n    ^-----------------------------------------------^\n",
				"message": "Function state mutability can be restricted to pure",
				"severity": "warning",
				"sourceLocation": {
					"end": 363,
					"file": "contracts/block/block.sol",
					"start": 314
				},
				"type": "Warning"
			}
		],
		"sources": {
			"contracts/block/block.sol": {
				"ast": {
					"absolutePath": "contracts/block/block.sol",
					"exportedSymbols": {
						"BancorConverterRegistry": [
							378
						],
						"IOwned": [
							16
						],
						"Owned": [
							94
						],
						"Utils": [
							140
						]
					},
					"id": 379,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.4",
								".24"
							],
							"nodeType": "PragmaDirective",
							"src": "117:24:0"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": false,
							"id": 16,
							"linearizedBaseContracts": [
								16
							],
							"name": "IOwned",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 6,
										"nodeType": "Block",
										"src": "361:2:0",
										"statements": []
									},
									"documentation": null,
									"id": 7,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": true,
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "328:2:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 5,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 7,
												"src": "352:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "352:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "351:9:0"
									},
									"scope": 16,
									"src": "314:49:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": null,
									"documentation": null,
									"id": 12,
									"implemented": false,
									"isConstructor": false,
									"isDeclaredConst": false,
									"modifiers": [],
									"name": "transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"name": "_newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "396:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "396:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "395:19:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "421:0:0"
									},
									"scope": 16,
									"src": "369:53:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": null,
									"documentation": null,
									"id": 15,
									"implemented": false,
									"isConstructor": false,
									"isDeclaredConst": false,
									"modifiers": [],
									"name": "acceptOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "451:2:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 14,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "460:0:0"
									},
									"scope": 16,
									"src": "427:34:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								}
							],
							"scope": 379,
							"src": "178:285:0"
						},
						{
							"id": 17,
							"literals": [
								"solidity",
								"^",
								"0.4",
								".24"
							],
							"nodeType": "PragmaDirective",
							"src": "503:24:0"
						},
						{
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 18,
										"name": "IOwned",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 16,
										"src": "612:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IOwned_$16",
											"typeString": "contract IOwned"
										}
									},
									"id": 19,
									"nodeType": "InheritanceSpecifier",
									"src": "612:6:0"
								}
							],
							"contractDependencies": [
								16
							],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 94,
							"linearizedBaseContracts": [
								94,
								16
							],
							"name": "Owned",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 21,
									"name": "owner",
									"nodeType": "VariableDeclaration",
									"scope": 94,
									"src": "625:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 20,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "625:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 23,
									"name": "newOwner",
									"nodeType": "VariableDeclaration",
									"scope": 94,
									"src": "651:23:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 22,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "651:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 29,
									"name": "OwnerUpdate",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 25,
												"indexed": true,
												"name": "_prevOwner",
												"nodeType": "VariableDeclaration",
												"scope": 29,
												"src": "699:26:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 24,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "699:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 27,
												"indexed": true,
												"name": "_newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 29,
												"src": "727:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "727:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "698:55:0"
									},
									"src": "681:73:0"
								},
								{
									"body": {
										"id": 37,
										"nodeType": "Block",
										"src": "821:35:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 32,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															21
														],
														"referencedDeclaration": 21,
														"src": "831:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 33,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 393,
															"src": "839:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 34,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "839:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "831:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 36,
												"nodeType": "ExpressionStatement",
												"src": "831:18:0"
											}
										]
									},
									"documentation": "@dev constructor",
									"id": 38,
									"implemented": true,
									"isConstructor": true,
									"isDeclaredConst": false,
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "811:2:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "821:0:0"
									},
									"scope": 94,
									"src": "800:56:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 48,
										"nodeType": "Block",
										"src": "923:56:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 44,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 41,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 393,
																	"src": "941:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 42,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "941:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 43,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	21
																],
																"referencedDeclaration": 21,
																"src": "955:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "941:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 40,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															396,
															397
														],
														"referencedDeclaration": 396,
														"src": "933:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 45,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "933:28:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 46,
												"nodeType": "ExpressionStatement",
												"src": "933:28:0"
											},
											{
												"id": 47,
												"nodeType": "PlaceholderStatement",
												"src": "971:1:0"
											}
										]
									},
									"documentation": null,
									"id": 49,
									"name": "ownerOnly",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:0:0"
									},
									"src": "904:75:0",
									"visibility": "internal"
								},
								{
									"body": {
										"id": 66,
										"nodeType": "Block",
										"src": "1273:74:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 59,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 57,
																"name": "_newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 51,
																"src": "1291:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 58,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	21
																],
																"referencedDeclaration": 21,
																"src": "1304:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1291:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 56,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															396,
															397
														],
														"referencedDeclaration": 396,
														"src": "1283:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 60,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1283:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 61,
												"nodeType": "ExpressionStatement",
												"src": "1283:27:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 64,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 62,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 23,
														"src": "1320:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 63,
														"name": "_newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 51,
														"src": "1331:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1320:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 65,
												"nodeType": "ExpressionStatement",
												"src": "1320:20:0"
											}
										]
									},
									"documentation": "@dev allows transferring the contract ownership\nthe new owner still needs to accept the transfer\ncan only be called by the contract owner\n@param _newOwner    new contract owner",
									"id": 67,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": false,
									"modifiers": [
										{
											"arguments": null,
											"id": 54,
											"modifierName": {
												"argumentTypes": null,
												"id": 53,
												"name": "ownerOnly",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 49,
												"src": "1263:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "1263:9:0"
										}
									],
									"name": "transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 51,
												"name": "_newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "1237:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 50,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1236:19:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 55,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1273:0:0"
									},
									"scope": 94,
									"src": "1210:137:0",
									"stateMutability": "nonpayable",
									"superFunction": 12,
									"visibility": "public"
								},
								{
									"body": {
										"id": 92,
										"nodeType": "Block",
										"src": "1467:148:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 74,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 71,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 393,
																	"src": "1485:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 72,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "1485:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 73,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 23,
																"src": "1499:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1485:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 70,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															396,
															397
														],
														"referencedDeclaration": 396,
														"src": "1477:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 75,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1477:31:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 76,
												"nodeType": "ExpressionStatement",
												"src": "1477:31:0"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 78,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																21
															],
															"referencedDeclaration": 21,
															"src": "1535:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 79,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 23,
															"src": "1542:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 77,
														"name": "OwnerUpdate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 29,
														"src": "1523:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 80,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1523:28:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 81,
												"nodeType": "EmitStatement",
												"src": "1518:33:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 82,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															21
														],
														"referencedDeclaration": 21,
														"src": "1561:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 83,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 23,
														"src": "1569:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1561:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "1561:16:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 90,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 86,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 23,
														"src": "1587:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 88,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1606:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 87,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1598:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": "address"
														},
														"id": 89,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1598:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1587:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 91,
												"nodeType": "ExpressionStatement",
												"src": "1587:21:0"
											}
										]
									},
									"documentation": "@dev used by a new owner to accept an ownership transfer",
									"id": 93,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": false,
									"modifiers": [],
									"name": "acceptOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 68,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1457:2:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1467:0:0"
									},
									"scope": 94,
									"src": "1433:182:0",
									"stateMutability": "nonpayable",
									"superFunction": 15,
									"visibility": "public"
								}
							],
							"scope": 379,
							"src": "594:1023:0"
						},
						{
							"id": 95,
							"literals": [
								"solidity",
								"^",
								"0.4",
								".24"
							],
							"nodeType": "PragmaDirective",
							"src": "1657:24:0"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 140,
							"linearizedBaseContracts": [
								140
							],
							"name": "Utils",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 98,
										"nodeType": "Block",
										"src": "1799:7:0",
										"statements": []
									},
									"documentation": "constructor",
									"id": 99,
									"implemented": true,
									"isConstructor": true,
									"isDeclaredConst": false,
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1789:2:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 97,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1799:0:0"
									},
									"scope": 140,
									"src": "1778:28:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "1906:48:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 106,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 104,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 101,
																"src": "1924:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 105,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1934:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1924:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 103,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															396,
															397
														],
														"referencedDeclaration": 396,
														"src": "1916:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 107,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1916:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 108,
												"nodeType": "ExpressionStatement",
												"src": "1916:20:0"
											},
											{
												"id": 109,
												"nodeType": "PlaceholderStatement",
												"src": "1946:1:0"
											}
										]
									},
									"documentation": null,
									"id": 111,
									"name": "greaterThanZero",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "1889:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 100,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1889:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1888:17:0"
									},
									"src": "1864:90:0",
									"visibility": "internal"
								},
								{
									"body": {
										"id": 124,
										"nodeType": "Block",
										"src": "2071:59:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 120,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 116,
																"name": "_address",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 113,
																"src": "2089:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 118,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2109:1:0",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 117,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2101:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": "address"
																},
																"id": 119,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2101:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2089:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 115,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															396,
															397
														],
														"referencedDeclaration": 396,
														"src": "2081:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 121,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2081:31:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 122,
												"nodeType": "ExpressionStatement",
												"src": "2081:31:0"
											},
											{
												"id": 123,
												"nodeType": "PlaceholderStatement",
												"src": "2122:1:0"
											}
										]
									},
									"documentation": null,
									"id": 125,
									"name": "validAddress",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 114,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 113,
												"name": "_address",
												"nodeType": "VariableDeclaration",
												"scope": 125,
												"src": "2053:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 112,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2053:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2052:18:0"
									},
									"src": "2031:99:0",
									"visibility": "internal"
								},
								{
									"body": {
										"id": 138,
										"nodeType": "Block",
										"src": "2244:62:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 134,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 130,
																"name": "_address",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 127,
																"src": "2262:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 132,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 410,
																		"src": "2282:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_Utils_$140",
																			"typeString": "contract Utils"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_Utils_$140",
																			"typeString": "contract Utils"
																		}
																	],
																	"id": 131,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2274:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": "address"
																},
																"id": 133,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2274:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2262:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 129,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															396,
															397
														],
														"referencedDeclaration": 396,
														"src": "2254:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2254:34:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 136,
												"nodeType": "ExpressionStatement",
												"src": "2254:34:0"
											},
											{
												"id": 137,
												"nodeType": "PlaceholderStatement",
												"src": "2298:1:0"
											}
										]
									},
									"documentation": null,
									"id": 139,
									"name": "notThis",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"name": "_address",
												"nodeType": "VariableDeclaration",
												"scope": 139,
												"src": "2226:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 126,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2226:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2225:18:0"
									},
									"src": "2209:97:0",
									"visibility": "internal"
								}
							],
							"scope": 379,
							"src": "1722:587:0"
						},
						{
							"id": 141,
							"literals": [
								"solidity",
								"^",
								"0.4",
								".24"
							],
							"nodeType": "PragmaDirective",
							"src": "2359:24:0"
						},
						{
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 142,
										"name": "Owned",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 94,
										"src": "2888:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Owned_$94",
											"typeString": "contract Owned"
										}
									},
									"id": 143,
									"nodeType": "InheritanceSpecifier",
									"src": "2888:5:0"
								},
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 144,
										"name": "Utils",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 140,
										"src": "2895:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Utils_$140",
											"typeString": "contract Utils"
										}
									},
									"id": 145,
									"nodeType": "InheritanceSpecifier",
									"src": "2895:5:0"
								}
							],
							"contractDependencies": [
								94,
								140,
								16
							],
							"contractKind": "contract",
							"documentation": "Bancor Converter Registry\nThe bancor converter registry keeps converter addresses by token addresses and vice versa.\nThe owner can update converter addresses so that a the token address always points to\nthe updated list of converters for each token.\nThe contract also allows to iterate through all the tokens in the network.\nNote that converter addresses for each token are returned in ascending order (from oldest\nto latest).",
							"fullyImplemented": true,
							"id": 378,
							"linearizedBaseContracts": [
								378,
								140,
								94,
								16
							],
							"name": "BancorConverterRegistry",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 149,
									"name": "tokensRegistered",
									"nodeType": "VariableDeclaration",
									"scope": 378,
									"src": "2907:50:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 148,
										"keyType": {
											"id": 146,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2916:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2907:25:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueType": {
											"id": 147,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "2927:4:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 154,
									"name": "tokensToConverters",
									"nodeType": "VariableDeclaration",
									"scope": 378,
									"src": "3009:57:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$",
										"typeString": "mapping(address => address[])"
									},
									"typeName": {
										"id": 153,
										"keyType": {
											"id": 150,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "3018:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "3009:30:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$",
											"typeString": "mapping(address => address[])"
										},
										"valueType": {
											"baseType": {
												"id": 151,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3029:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"id": 152,
											"length": null,
											"nodeType": "ArrayTypeName",
											"src": "3029:9:0",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
												"typeString": "address[]"
											}
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 158,
									"name": "convertersToTokens",
									"nodeType": "VariableDeclaration",
									"scope": 378,
									"src": "3113:55:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_address_$",
										"typeString": "mapping(address => address)"
									},
									"typeName": {
										"id": 157,
										"keyType": {
											"id": 155,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "3122:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "3113:28:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_address_$",
											"typeString": "mapping(address => address)"
										},
										"valueType": {
											"id": 156,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "3133:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 161,
									"name": "tokens",
									"nodeType": "VariableDeclaration",
									"scope": 378,
									"src": "3215:23:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_address_$dyn_storage",
										"typeString": "address[]"
									},
									"typeName": {
										"baseType": {
											"id": 159,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "3215:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"id": 160,
										"length": null,
										"nodeType": "ArrayTypeName",
										"src": "3215:9:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
											"typeString": "address[]"
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 167,
									"name": "ConverterAddition",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 163,
												"indexed": true,
												"name": "_token",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "3394:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 162,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3394:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 165,
												"indexed": false,
												"name": "_address",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "3418:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 164,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3418:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3393:42:0"
									},
									"src": "3370:66:0"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 173,
									"name": "ConverterRemoval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"indexed": true,
												"name": "_token",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "3528:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 168,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3528:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 171,
												"indexed": false,
												"name": "_address",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "3552:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3552:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3527:42:0"
									},
									"src": "3505:65:0"
								},
								{
									"body": {
										"id": 176,
										"nodeType": "Block",
										"src": "3637:7:0",
										"statements": []
									},
									"documentation": "@dev constructor",
									"id": 177,
									"implemented": true,
									"isConstructor": true,
									"isDeclaredConst": false,
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 174,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3627:2:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 175,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3637:0:0"
									},
									"scope": 378,
									"src": "3616:28:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 185,
										"nodeType": "Block",
										"src": "3809:37:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 182,
														"name": "tokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 161,
														"src": "3826:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_storage",
															"typeString": "address[] storage ref"
														}
													},
													"id": 183,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "length",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "3826:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 181,
												"id": 184,
												"nodeType": "Return",
												"src": "3819:20:0"
											}
										]
									},
									"documentation": "@dev returns the number of tokens in the registry\n@return number of tokens",
									"id": 186,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": true,
									"modifiers": [],
									"name": "tokenCount",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3776:2:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 180,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 186,
												"src": "3800:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 179,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3800:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3799:9:0"
									},
									"scope": 378,
									"src": "3757:89:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 198,
										"nodeType": "Block",
										"src": "4135:57:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 193,
															"name": "tokensToConverters",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 154,
															"src": "4152:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$",
																"typeString": "mapping(address => address[] storage ref)"
															}
														},
														"id": 195,
														"indexExpression": {
															"argumentTypes": null,
															"id": 194,
															"name": "_token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 188,
															"src": "4171:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4152:26:0",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_storage",
															"typeString": "address[] storage ref"
														}
													},
													"id": 196,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "length",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "4152:33:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 192,
												"id": 197,
												"nodeType": "Return",
												"src": "4145:40:0"
											}
										]
									},
									"documentation": "@dev returns the number of converters associated with the given token\nor 0 if the token isn't registered\n@param _token   token address\n@return number of converters",
									"id": 199,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": true,
									"modifiers": [],
									"name": "converterCount",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 189,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 188,
												"name": "_token",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "4089:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 187,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4089:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4088:16:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 192,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 191,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "4126:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 190,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4126:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4125:9:0"
									},
									"scope": 378,
									"src": "4065:127:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 225,
										"nodeType": "Block",
										"src": "4541:147:0",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 213,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 208,
														"name": "_index",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 203,
														"src": "4555:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 209,
																"name": "tokensToConverters",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 154,
																"src": "4565:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$",
																	"typeString": "mapping(address => address[] storage ref)"
																}
															},
															"id": 211,
															"indexExpression": {
																"argumentTypes": null,
																"id": 210,
																"name": "_token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 201,
																"src": "4584:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4565:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 212,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "4565:33:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4555:43:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 218,
												"nodeType": "IfStatement",
												"src": "4551:78:0",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 215,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4627:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 214,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4619:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": "address"
														},
														"id": 216,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4619:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"functionReturnParameters": 207,
													"id": 217,
													"nodeType": "Return",
													"src": "4612:17:0"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 219,
															"name": "tokensToConverters",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 154,
															"src": "4647:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$",
																"typeString": "mapping(address => address[] storage ref)"
															}
														},
														"id": 221,
														"indexExpression": {
															"argumentTypes": null,
															"id": 220,
															"name": "_token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 201,
															"src": "4666:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4647:26:0",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_storage",
															"typeString": "address[] storage ref"
														}
													},
													"id": 223,
													"indexExpression": {
														"argumentTypes": null,
														"id": 222,
														"name": "_index",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 203,
														"src": "4674:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4647:34:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 207,
												"id": 224,
												"nodeType": "Return",
												"src": "4640:41:0"
											}
										]
									},
									"documentation": "@dev returns the converter address associated with the given token\nor zero address if no such converter exists\n@param _token   token address\n@param _index   converter index\n@return converter address",
									"id": 226,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": true,
									"modifiers": [],
									"name": "converterAddress",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 201,
												"name": "_token",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "4480:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 200,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4480:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 203,
												"name": "_index",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "4496:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 202,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "4496:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4479:31:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 206,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "4532:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 205,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4532:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4531:9:0"
									},
									"scope": 378,
									"src": "4454:234:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 237,
										"nodeType": "Block",
										"src": "4986:54:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 233,
														"name": "convertersToTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 158,
														"src": "5003:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_address_$",
															"typeString": "mapping(address => address)"
														}
													},
													"id": 235,
													"indexExpression": {
														"argumentTypes": null,
														"id": 234,
														"name": "_converter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 228,
														"src": "5022:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5003:30:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 232,
												"id": 236,
												"nodeType": "Return",
												"src": "4996:37:0"
											}
										]
									},
									"documentation": "@dev returns the token address associated with the given converter\nor zero address if no such converter exists\n@param _converter   converter address\n@return token address",
									"id": 238,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": true,
									"modifiers": [],
									"name": "tokenAddress",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 228,
												"name": "_converter",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "4936:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 227,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4936:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4935:20:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 232,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 231,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "4977:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 230,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4977:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4976:9:0"
									},
									"scope": 378,
									"src": "4914:126:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 299,
										"nodeType": "Block",
										"src": "5442:452:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 260,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 254,
																	"name": "convertersToTokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 158,
																	"src": "5460:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_address_$",
																		"typeString": "mapping(address => address)"
																	}
																},
																"id": 256,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 255,
																	"name": "_converter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 242,
																	"src": "5479:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5460:30:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 258,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5502:1:0",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 257,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "5494:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": "address"
																},
																"id": 259,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5494:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "5460:44:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 253,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															396,
															397
														],
														"referencedDeclaration": 396,
														"src": "5452:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 261,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5452:53:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 262,
												"nodeType": "ExpressionStatement",
												"src": "5452:53:0"
											},
											{
												"condition": {
													"argumentTypes": null,
													"id": 266,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "5567:25:0",
													"subExpression": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 263,
															"name": "tokensRegistered",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 149,
															"src": "5568:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 265,
														"indexExpression": {
															"argumentTypes": null,
															"id": 264,
															"name": "_token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 240,
															"src": "5585:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5568:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 280,
												"nodeType": "IfStatement",
												"src": "5563:120:0",
												"trueBody": {
													"id": 279,
													"nodeType": "Block",
													"src": "5594:89:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 270,
																		"name": "_token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 240,
																		"src": "5620:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"argumentTypes": null,
																		"id": 267,
																		"name": "tokens",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 161,
																		"src": "5608:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_address_$dyn_storage",
																			"typeString": "address[] storage ref"
																		}
																	},
																	"id": 269,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "push",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "5608:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_arraypush_nonpayable$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) returns (uint256)"
																	}
																},
																"id": 271,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5608:19:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 272,
															"nodeType": "ExpressionStatement",
															"src": "5608:19:0"
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 277,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"id": 273,
																		"name": "tokensRegistered",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 149,
																		"src": "5641:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 275,
																	"indexExpression": {
																		"argumentTypes": null,
																		"id": 274,
																		"name": "_token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 240,
																		"src": "5658:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "5641:24:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"hexValue": "74727565",
																	"id": 276,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5668:4:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "5641:31:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 278,
															"nodeType": "ExpressionStatement",
															"src": "5641:31:0"
														}
													]
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 285,
															"name": "_converter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 242,
															"src": "5725:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 281,
																"name": "tokensToConverters",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 154,
																"src": "5693:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$",
																	"typeString": "mapping(address => address[] storage ref)"
																}
															},
															"id": 283,
															"indexExpression": {
																"argumentTypes": null,
																"id": 282,
																"name": "_token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 240,
																"src": "5712:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5693:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 284,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "push",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "5693:31:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) returns (uint256)"
														}
													},
													"id": 286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5693:43:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 287,
												"nodeType": "ExpressionStatement",
												"src": "5693:43:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 292,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 288,
															"name": "convertersToTokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 158,
															"src": "5746:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_address_$",
																"typeString": "mapping(address => address)"
															}
														},
														"id": 290,
														"indexExpression": {
															"argumentTypes": null,
															"id": 289,
															"name": "_converter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 242,
															"src": "5765:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "5746:30:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 291,
														"name": "_token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 240,
														"src": "5779:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5746:39:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 293,
												"nodeType": "ExpressionStatement",
												"src": "5746:39:0"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 295,
															"name": "_token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 240,
															"src": "5868:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 296,
															"name": "_converter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 242,
															"src": "5876:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 294,
														"name": "ConverterAddition",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 167,
														"src": "5850:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5850:37:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 298,
												"nodeType": "EmitStatement",
												"src": "5845:42:0"
											}
										]
									},
									"documentation": "@dev adds a new converter address for a given token to the registry\nthrows if the converter is already registered\n@param _token       token address\n@param _converter   converter address",
									"id": 300,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": false,
									"modifiers": [
										{
											"arguments": null,
											"id": 245,
											"modifierName": {
												"argumentTypes": null,
												"id": 244,
												"name": "ownerOnly",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 49,
												"src": "5366:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "5366:9:0"
										},
										{
											"arguments": [
												{
													"argumentTypes": null,
													"id": 247,
													"name": "_token",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 240,
													"src": "5397:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 248,
											"modifierName": {
												"argumentTypes": null,
												"id": 246,
												"name": "validAddress",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 125,
												"src": "5384:12:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$_t_address_$",
													"typeString": "modifier (address)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "5384:20:0"
										},
										{
											"arguments": [
												{
													"argumentTypes": null,
													"id": 250,
													"name": "_converter",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 242,
													"src": "5426:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 251,
											"modifierName": {
												"argumentTypes": null,
												"id": 249,
												"name": "validAddress",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 125,
												"src": "5413:12:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$_t_address_$",
													"typeString": "modifier (address)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "5413:24:0"
										}
									],
									"name": "registerConverter",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 240,
												"name": "_token",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "5307:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 239,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5307:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 242,
												"name": "_converter",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "5323:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 241,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5323:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5306:36:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 252,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5442:0:0"
									},
									"scope": 378,
									"src": "5280:614:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 376,
										"nodeType": "Block",
										"src": "6343:699:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 318,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 313,
																"name": "_index",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 304,
																"src": "6361:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"id": 314,
																		"name": "tokensToConverters",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 154,
																		"src": "6370:18:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$",
																			"typeString": "mapping(address => address[] storage ref)"
																		}
																	},
																	"id": 316,
																	"indexExpression": {
																		"argumentTypes": null,
																		"id": 315,
																		"name": "_token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 302,
																		"src": "6389:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6370:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_address_$dyn_storage",
																		"typeString": "address[] storage ref"
																	}
																},
																"id": 317,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "6370:33:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6361:42:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 312,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															396,
															397
														],
														"referencedDeclaration": 396,
														"src": "6353:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 319,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6353:51:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 320,
												"nodeType": "ExpressionStatement",
												"src": "6353:51:0"
											},
											{
												"assignments": [
													322
												],
												"declarations": [
													{
														"constant": false,
														"id": 322,
														"name": "converter",
														"nodeType": "VariableDeclaration",
														"scope": 377,
														"src": "6415:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 321,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6415:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 328,
												"initialValue": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 323,
															"name": "tokensToConverters",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 154,
															"src": "6435:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$",
																"typeString": "mapping(address => address[] storage ref)"
															}
														},
														"id": 325,
														"indexExpression": {
															"argumentTypes": null,
															"id": 324,
															"name": "_token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 302,
															"src": "6454:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "6435:26:0",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_storage",
															"typeString": "address[] storage ref"
														}
													},
													"id": 327,
													"indexExpression": {
														"argumentTypes": null,
														"id": 326,
														"name": "_index",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 304,
														"src": "6462:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "6435:34:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6415:54:0"
											},
											{
												"body": {
													"id": 358,
													"nodeType": "Block",
													"src": "6606:90:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 356,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 344,
																			"name": "tokensToConverters",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 154,
																			"src": "6620:18:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$",
																				"typeString": "mapping(address => address[] storage ref)"
																			}
																		},
																		"id": 349,
																		"indexExpression": {
																			"argumentTypes": null,
																			"id": 345,
																			"name": "_token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 302,
																			"src": "6639:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6620:26:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_address_$dyn_storage",
																			"typeString": "address[] storage ref"
																		}
																	},
																	"id": 350,
																	"indexExpression": {
																		"argumentTypes": null,
																		"commonType": {
																			"typeIdentifier": "t_uint32",
																			"typeString": "uint32"
																		},
																		"id": 348,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"argumentTypes": null,
																			"id": 346,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 330,
																			"src": "6647:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint32",
																				"typeString": "uint32"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"argumentTypes": null,
																			"hexValue": "31",
																			"id": 347,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6651:1:0",
																			"subdenomination": null,
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "6647:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint32",
																			"typeString": "uint32"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "6620:33:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 351,
																			"name": "tokensToConverters",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 154,
																			"src": "6656:18:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$",
																				"typeString": "mapping(address => address[] storage ref)"
																			}
																		},
																		"id": 353,
																		"indexExpression": {
																			"argumentTypes": null,
																			"id": 352,
																			"name": "_token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 302,
																			"src": "6675:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6656:26:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_address_$dyn_storage",
																			"typeString": "address[] storage ref"
																		}
																	},
																	"id": 355,
																	"indexExpression": {
																		"argumentTypes": null,
																		"id": 354,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 330,
																		"src": "6683:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint32",
																			"typeString": "uint32"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6656:29:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "6620:65:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 357,
															"nodeType": "ExpressionStatement",
															"src": "6620:65:0"
														}
													]
												},
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 340,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 335,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 330,
														"src": "6562:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 336,
																"name": "tokensToConverters",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 154,
																"src": "6566:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$",
																	"typeString": "mapping(address => address[] storage ref)"
																}
															},
															"id": 338,
															"indexExpression": {
																"argumentTypes": null,
																"id": 337,
																"name": "_token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 302,
																"src": "6585:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "6566:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 339,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "6566:33:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6562:37:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 359,
												"initializationExpression": {
													"assignments": [
														330
													],
													"declarations": [
														{
															"constant": false,
															"id": 330,
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 377,
															"src": "6539:8:0",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															},
															"typeName": {
																"id": 329,
																"name": "uint32",
																"nodeType": "ElementaryTypeName",
																"src": "6539:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"value": null,
															"visibility": "internal"
														}
													],
													"id": 334,
													"initialValue": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														},
														"id": 333,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 331,
															"name": "_index",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 304,
															"src": "6550:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"argumentTypes": null,
															"hexValue": "31",
															"id": 332,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6559:1:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "6550:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "6539:21:0"
												},
												"loopExpression": {
													"expression": {
														"argumentTypes": null,
														"id": 342,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "6601:3:0",
														"subExpression": {
															"argumentTypes": null,
															"id": 341,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 330,
															"src": "6601:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"id": 343,
													"nodeType": "ExpressionStatement",
													"src": "6601:3:0"
												},
												"nodeType": "ForStatement",
												"src": "6534:162:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 364,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "--",
													"prefix": false,
													"src": "6778:35:0",
													"subExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 360,
																"name": "tokensToConverters",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 154,
																"src": "6778:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$",
																	"typeString": "mapping(address => address[] storage ref)"
																}
															},
															"id": 362,
															"indexExpression": {
																"argumentTypes": null,
																"id": 361,
																"name": "_token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 302,
																"src": "6797:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "6778:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 363,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "6778:33:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 365,
												"nodeType": "ExpressionStatement",
												"src": "6778:35:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 369,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "6900:36:0",
													"subExpression": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 366,
															"name": "convertersToTokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 158,
															"src": "6907:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_address_$",
																"typeString": "mapping(address => address)"
															}
														},
														"id": 368,
														"indexExpression": {
															"argumentTypes": null,
															"id": 367,
															"name": "converter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 322,
															"src": "6926:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "6907:29:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 370,
												"nodeType": "ExpressionStatement",
												"src": "6900:36:0"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 372,
															"name": "_token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 302,
															"src": "7017:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 373,
															"name": "converter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 322,
															"src": "7025:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 371,
														"name": "ConverterRemoval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 173,
														"src": "7000:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 374,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7000:35:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 375,
												"nodeType": "EmitStatement",
												"src": "6995:40:0"
											}
										]
									},
									"documentation": "@dev removes an existing converter from the registry\nnote that the function doesn't scale and might be needed to be called\nmultiple times when removing an older converter from a large converter list\n@param _token   token address\n@param _index   converter index",
									"id": 377,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": false,
									"modifiers": [
										{
											"arguments": null,
											"id": 307,
											"modifierName": {
												"argumentTypes": null,
												"id": 306,
												"name": "ownerOnly",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 49,
												"src": "6300:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "6300:9:0"
										},
										{
											"arguments": [
												{
													"argumentTypes": null,
													"id": 309,
													"name": "_token",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 302,
													"src": "6331:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 310,
											"modifierName": {
												"argumentTypes": null,
												"id": 308,
												"name": "validAddress",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 125,
												"src": "6318:12:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$_t_address_$",
													"typeString": "modifier (address)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "6318:20:0"
										}
									],
									"name": "unregisterConverter",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 305,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 302,
												"name": "_token",
												"nodeType": "VariableDeclaration",
												"scope": 377,
												"src": "6246:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 301,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6246:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 304,
												"name": "_index",
												"nodeType": "VariableDeclaration",
												"scope": 377,
												"src": "6262:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 303,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "6262:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6245:31:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 311,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6343:0:0"
									},
									"scope": 378,
									"src": "6217:825:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								}
							],
							"scope": 379,
							"src": "2852:4192:0"
						}
					],
					"src": "117:6927:0"
				},
				"id": 0
			}
		}
	}
}